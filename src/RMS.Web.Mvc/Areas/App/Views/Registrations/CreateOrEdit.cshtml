@using RMS.Web.Areas.App.Models.Registrations
@using RMS.Web.Areas.App.Startup
@using RMS.Web.Areas.App.Models.Registrations.Helpers

@model ProcessingRegistrationViewModel
@{
    ViewBag.CurrentPageName = AppPageNames.Common.Registrations;
    ViewData["DisableLabel"] = false;

    var incompleteReason = Model.IncompleteReasons.FirstOrDefault(x => x.RejectionReason.Id == Model.SelectedIncompleteReasonId);
    var incompleteReasonDescription = incompleteReason?.RejectionReason?.Description;

    if (String.IsNullOrWhiteSpace(incompleteReasonDescription)) { incompleteReasonDescription = L("ReasonUnknown"); }

    var rejectionReason = Model.RejectionReasons.FirstOrDefault(x => x.RejectionReason.Id == Model.SelectedRejectionReasonId);
    var rejectionReasonDescription = rejectionReason?.RejectionReason?.Description;

    if (String.IsNullOrWhiteSpace(rejectionReasonDescription)) { rejectionReasonDescription = L("ReasonUnknown"); }

    // Dictionary <<StatusCodeString, StatusCodeColour>, StatusCodeLocalizedString>
    Tuple<string, string, string> statusCodeTuple;
    switch (Model.StatusCode)
    {
        case "110":
            statusCodeTuple = new Tuple<string, string, string>("fas fa-file-invoice-dollar", "color-awaiting-invoice-check", L("RegistrationIsAwaitingInvoiceCheck"));
            break;
        case "200":
            statusCodeTuple = new Tuple<string, string, string>("fas fa-check-circle", "color-approved", L("RegistrationIsApproved"));
            break;
        case "300":
            statusCodeTuple = new Tuple<string, string, string>("fas fa-spinner", "color-progress", L("RegistrationIsInProgress"));
            break;
        case "400":
            if (Model.CampaignType == RMS.SBJ.Registrations.Dtos.CampaignType.Premium)
            {
                statusCodeTuple = new Tuple<string, string, string>("fas fa-warehouse", "color-sent", L("RegistrationIsSentForPremium"));
            }
            else if (Model.CampaignType == RMS.SBJ.Registrations.Dtos.CampaignType.CashRefund)
            {
                statusCodeTuple = new Tuple<string, string, string>("fas fa-warehouse", "color-sent", L("RegistrationIsSentForCashRefund"));
            }
            else if (Model.CampaignType == RMS.SBJ.Registrations.Dtos.CampaignType.ActivationCode)
            {
                statusCodeTuple = new Tuple<string, string, string>("fas fa-warehouse", "color-sent", L("RegistrationIsSentForActivationCode"));
            }
            else
            {
                statusCodeTuple = new Tuple<string, string, string>("fas fa-warehouse", "color-sent", L("RegistrationIsSent"));
            }
            break;
        case "500":
            statusCodeTuple = new Tuple<string, string, string>("fas fa-dot-circle", "color-incomplete", (incompleteReasonDescription != null) ?
        $"{L("RegistrationIsIncomplete")} ({incompleteReasonDescription})" : L("RegistrationIsIncomplete"));
            break;
        case "999":
            statusCodeTuple = new Tuple<string, string, string>("fas fa-times-circle", "color-rejected", (rejectionReasonDescription != null) ?
        $"{L("RegistrationIsRejected")} ({rejectionReasonDescription})" : L("RegistrationIsRejected"));
            break;
        default: // Pending
            statusCodeTuple = new Tuple<string, string, string>("far fa-circle", "color-pending", L("RegistrationIsPending"));
            break;
    }
}
@section Scripts
{
    <script abp-src="/view-resources/Areas/App/Views/Registrations/CreateOrEdit.js" asp-append-version="true"></script>
    <script abp-src="/view-resources/Areas/App/Views/Registrations/_RelatedRegistrations.js" asp-append-version="true"></script>
    <script type="text/javascript">
        (function ($) {
            const $lg = $('.image-preview__container');
            const $mg = $('.messagePreviewCell');

            for (let idx = 0; idx < $lg.length; idx++) {
                $lg[idx].addEventListener('onBeforeOpen.lg', loadCloudImage(idx));
                $lg[idx].addEventListener('click', initiateLightGallery(idx));
            }

            for (let idx = 0; idx < $mg.length; idx++) {
                let messageContent = $($mg[idx]).find('input:hidden').val();

                $($mg[idx]).append(messageContent);
            }

            function initiateLightGallery(index) {
                $($lg[index]).lightGallery({
                    rotateLeft: true,
                    flipHorizontal: true,
                    flipVertical: true,
                    controls: false,
                    thumbnail: false,
                    pager: false,
                    autoplay: false,
                    autoplayControls: false,
                    counter: false,
                    mousewheel: false,
                    keyPress: true,
                    escKey: true,
                    enableSwipe: false,
                    enableDrag: false,
                    share: false
                });
            }

            function loadCloudImage(idx) {
                let blobPath = $($lg[idx]).find('input:hidden').val();
                let a = $($lg[idx]).find('a');

                $.ajax({
                    type: 'GET',
                    async: false,
                    url: '/App/Registrations/LoadCloudImage',
                    data: { blobPath: blobPath },
                    mimeType: 'json',
                    success: function (data) {
                        a.attr('data-src', data.result.imageBase64String);
                        a.attr('data-href', data.result.imageBase64String);
                    }
                });
            }
        })(jQuery);
    </script>
}
@section Styles
{
    <link rel="stylesheet" abp-href="/Common/Styles/SBJ/shared.min.css" asp-append-version="true" />
    <link rel="stylesheet" abp-href="/Common/Styles/SBJ/pages.min.css" asp-append-version="true" />
    <link rel="stylesheet" abp-href="/Common/Styles/SBJ/components.min.css" asp-append-version="true" />
}

<div class="kt-content kt-grid__item kt-grid__item--fluid kt-grid kt-grid--hor">
    <div class="kt-subheader kt-grid__item">
        <div class="@(await GetContainerClass())">
            <div class="kt-subheader__main">
                <h3 class="kt-subheader__title">
                    <span>@(Model.IsEditMode ? (L("EditingRegistration")) : L("CreateNewRegistration"))</span>
                </h3>
                <span class="kt-subheader__separator kt-subheader__separator--v"></span>
                <div class="kt-subheader__breadcrumbs">
                    <a href="/App/Registrations" class="kt-subheader__breadcrumbs-home"><i class="flaticon2-shelter"></i>&thinsp;@L("Registrations")</a>
                </div>
            </div>
        </div>
    </div>

    <div class="@(await GetContainerClass()) kt-grid__item kt-grid__item--fluid">
        <div class="kt-portlet kt-portlet--mobile">
            <form name="RegistrationInformationsForm" role="form" novalidate class="form-validation">
                <div class="kt-portlet__body">
                    <div id="RegistrationInformationsTab">
                        @if (Model.IsEditMode)
                        {
                            <input type="hidden" id="RegistrationId" value="@Model.Registration.Id" />
                            <input type="hidden" id="StatusCode" value="@Model.StatusCode" />
                            <input type="hidden" id="LockChangeEvent" value="1" />
                            <input type="hidden" id="StatusChangeEvent" value="0" />
                        }

                        <div class="card mt-element-ribbon light portlet-fit bordered">
                            <div class="ribbon ribbon-vertical-right ribbon-shadow ribbon-color-primary @statusCodeTuple.Item2 uppercase">
                                <div class="ribbon-sub ribbon-bookmark"></div>
                                <i class="@statusCodeTuple.Item1"></i>
                            </div>

                            <h2 class="card-header">@Model.CampaignTitle</h2>
                            <p class="card-header__sub">@L("From") <strong>@Model.CampaignStartDate</strong> @L("Until") <strong>@Model.CampaignEndDate</strong></p>

                            <div class="card-body">
                                <div class="registration-details">
                                    <label class="d-block">
                                        <strong>@L("RegistrationId")</strong>: @Model.Registration.Id
                                    </label>
                                    <label class="d-block">
                                        <strong>@L("DateCreated")</strong>: @Model.DateCreated
                                    </label>
                                    <label class="d-block">
                                        <strong>@L("CurrentStatus")</strong>: @statusCodeTuple.Item3
                                    </label>
                                </div>
                            </div>
                        </div>

                        @foreach (var formBlock in Model.FormBlocks)
                        {
                            <div class="form-group mt-5 card wrapper__form-block">
                                <h4 class="card-header">@formBlock.BlockTitle</h4>

                                @if (formBlock.FormFields.Any() && formBlock.FormFieldsCollectionLines.Count == 0)
                                {
                                    <div class="card-body">
                                        @foreach (var formBlockField in formBlock.FormFields)
                                        {
                                            @switch (formBlockField.FieldType)
                                            {
                                                case FieldTypeHelper.InputText:
                                                    <partial name="/Areas/App/Views/FieldTypes/_InputText.cshtml" model="formBlockField" />
                                                    break;
                                                case FieldTypeHelper.InputNumber:
                                                    <partial name="/Areas/App/Views/FieldTypes/_InputNumber.cshtml" model="formBlockField" />
                                                    break;
                                                case FieldTypeHelper.InputPassword:
                                                    <partial name="/Areas/App/Views/FieldTypes/_InputPassword.cshtml" model="formBlockField" />
                                                    break;
                                                case FieldTypeHelper.DatePicker:
                                                    <partial name="/Areas/App/Views/FieldTypes/_DatePicker.cshtml" model="formBlockField" />
                                                    break;
                                                case FieldTypeHelper.DropdownMenu:
                                                    <partial name="/Areas/App/Views/FieldTypes/_DropdownMenu.cshtml" model="formBlockField" />
                                                    break;
                                                case FieldTypeHelper.CheckBox:
                                                    <partial name="/Areas/App/Views/FieldTypes/_CheckBox.cshtml" model="formBlockField" />
                                                    break;
                                                case FieldTypeHelper.RadioButton:
                                                    <partial name="/Areas/App/Views/FieldTypes/_RadioButton.cshtml" model="formBlockField" />
                                                    break;
                                                case FieldTypeHelper.Rating:
                                                    <partial name="/Areas/App/Views/FieldTypes/_Rating.cshtml" model="formBlockField" />
                                                    break;
                                                case FieldTypeHelper.Tile:
                                                    <partial name="/Areas/App/Views/FieldTypes/_Tile.cshtml" model="formBlockField" />
                                                    break;
                                                case FieldTypeHelper.IbanChecker:
                                                    <partial name="/Areas/App/Views/FieldTypes/_IbanChecker.cshtml" model="formBlockField" />
                                                    break;
                                                case FieldTypeHelper.FileUploader:
                                                    <partial name="/Areas/App/Views/FieldTypes/_FileUploader.cshtml" model="formBlockField" />
                                                    break;
                                                case FieldTypeHelper.Product:
                                                    <partial name="/Areas/App/Views/FieldTypes/_Product.cshtml" model="formBlockField" view-data="ViewData" />
                                                    break;
                                                case FieldTypeHelper.Remark:
                                                    <partial name="/Areas/App/Views/FieldTypes/_Remark.cshtml" model="formBlockField" view-data="ViewData" />
                                                    break;
                                                case FieldTypeHelper.RetailerLocation:
                                                    <partial name="/Areas/App/Views/FieldTypes/_RetailerLocation.cshtml" model="formBlockField" view-data="ViewData" />
                                                    break;
                                                case FieldTypeHelper.TextArea:
                                                    <partial name="/Areas/App/Views/FieldTypes/_TextArea.cshtml" model="formBlockField" view-data="ViewData" />
                                                    break;
                                                case FieldTypeHelper.UniqueCode:
                                                case FieldTypeHelper.UniqueCodeByCampaign:
                                                    <partial name="/Areas/App/Views/FieldTypes/_UniqueCode.cshtml" model="formBlockField" view-data="ViewData" />
                                                    break;
                                                case FieldTypeHelper.Literal:
                                                    <partial name="/Areas/App/Views/FieldTypes/_Literal.cshtml" model="formBlockField" view-data="ViewData" />
                                                    break;
                                                default:
                                                    <partial name="/Areas/App/Views/FieldTypes/_ControlNotImplemented.cshtml" model="formBlockField" />
                                                    break;
                                            }

                                            @if (formBlockField.RegistrationField == "PostalCode" && !String.IsNullOrWhiteSpace(Model.PostalCountry))
                                            {
                                                <div style="margin-left: 60px; margin-top: 5px; margin-bottom: 5px;">
                                                    <strong>@Model.PostalCountry</strong>
                                                </div>
                                            }

                                            @if (formBlockField.FieldType != FieldTypeHelper.Literal)
                                            {
                                                <input type="hidden" id="@("FieldId__" + formBlockField.FieldId)" value="@formBlockField.FieldId" />
                                                <input type="hidden" id="@("FieldType__" + formBlockField.FieldId)" value="@formBlockField.FieldType" />
                                                <input type="hidden" id="@("FieldLabel__" + formBlockField.FieldId)" value="@formBlockField.FieldLabel" />
                                                <input type="hidden" id="@("FieldSource__" + formBlockField.FieldId)" value="@formBlockField.FieldSource" />
                                                <input type="hidden" id="@("RegistrationField__" + formBlockField.FieldId)" value="@formBlockField.RegistrationField" />
                                                <input type="hidden" id="@("PurchaseRegistrationField__" + formBlockField.FieldId)" value="@formBlockField.PurchaseRegistrationField" />
                                                <input type="hidden" id="@("FallbackFieldId__" + formBlockField.FieldId)" value="@formBlockField.FallbackFieldId" />
                                            }
                                        }
                                    </div>
                                }
                                else if (formBlock.FormFields.Any() && formBlock.FormFieldsCollectionLines.Any())
                                {
                                    <div class="card-body">
                                        @foreach (var formBlockField in formBlock.FormFields)
                                        {
                                            @switch (formBlockField.FieldType)
                                            {
                                                case FieldTypeHelper.InputText:
                                                    <partial name="/Areas/App/Views/FieldTypes/_InputText.cshtml" model="formBlockField" />
                                                    break;
                                                case FieldTypeHelper.InputNumber:
                                                    <partial name="/Areas/App/Views/FieldTypes/_InputNumber.cshtml" model="formBlockField" />
                                                    break;
                                                case FieldTypeHelper.InputPassword:
                                                    <partial name="/Areas/App/Views/FieldTypes/_InputPassword.cshtml" model="formBlockField" />
                                                    break;
                                                case FieldTypeHelper.DatePicker:
                                                    <partial name="/Areas/App/Views/FieldTypes/_DatePicker.cshtml" model="formBlockField" />
                                                    break;
                                                case FieldTypeHelper.DropdownMenu:
                                                    <partial name="/Areas/App/Views/FieldTypes/_DropdownMenu.cshtml" model="formBlockField" />
                                                    break;
                                                case FieldTypeHelper.CheckBox:
                                                    <partial name="/Areas/App/Views/FieldTypes/_CheckBox.cshtml" model="formBlockField" />
                                                    break;
                                                case FieldTypeHelper.RadioButton:
                                                    <partial name="/Areas/App/Views/FieldTypes/_RadioButton.cshtml" model="formBlockField" />
                                                    break;
                                                case FieldTypeHelper.Rating:
                                                    <partial name="/Areas/App/Views/FieldTypes/_Rating.cshtml" model="formBlockField" />
                                                    break;
                                                case FieldTypeHelper.Tile:
                                                    <partial name="/Areas/App/Views/FieldTypes/_Tile.cshtml" model="formBlockField" />
                                                    break;
                                                case FieldTypeHelper.IbanChecker:
                                                    <partial name="/Areas/App/Views/FieldTypes/_IbanChecker.cshtml" model="formBlockField" />
                                                    break;
                                                case FieldTypeHelper.FileUploader:
                                                    <partial name="/Areas/App/Views/FieldTypes/_FileUploader.cshtml" model="formBlockField" />
                                                    break;
                                                case FieldTypeHelper.Product:
                                                    <partial name="/Areas/App/Views/FieldTypes/_Product.cshtml" model="formBlockField" view-data="ViewData" />
                                                    break;
                                                case FieldTypeHelper.Remark:
                                                    <partial name="/Areas/App/Views/FieldTypes/_Remark.cshtml" model="formBlockField" view-data="ViewData" />
                                                    break;
                                                case FieldTypeHelper.RetailerLocation:
                                                    <partial name="/Areas/App/Views/FieldTypes/_RetailerLocation.cshtml" model="formBlockField" view-data="ViewData" />
                                                    break;
                                                case FieldTypeHelper.TextArea:
                                                    <partial name="/Areas/App/Views/FieldTypes/_TextArea.cshtml" model="formBlockField" view-data="ViewData" />
                                                    break;
                                                case FieldTypeHelper.UniqueCode:
                                                case FieldTypeHelper.UniqueCodeByCampaign:
                                                    <partial name="/Areas/App/Views/FieldTypes/_UniqueCode.cshtml" model="formBlockField" view-data="ViewData" />
                                                    break;
                                                case FieldTypeHelper.Literal:
                                                    <partial name="/Areas/App/Views/FieldTypes/_Literal.cshtml" model="formBlockField" view-data="ViewData" />
                                                    break;
                                                default:
                                                    <partial name="/Areas/App/Views/FieldTypes/_ControlNotImplemented.cshtml" model="formBlockField" />
                                                    break;
                                            }

                                            @if (formBlockField.RegistrationField == "PostalCode" && !String.IsNullOrWhiteSpace(Model.PostalCountry))
                                            {
                                                <div style="margin-left: 60px; margin-top: 5px; margin-bottom: 5px;">
                                                    <strong>@Model.PostalCountry</strong>
                                                </div>
                                            }

                                            @if (formBlockField.FieldType != FieldTypeHelper.Literal)
                                            {
                                                <input type="hidden" id="@("FieldId__" + formBlockField.FieldId)" value="@formBlockField.FieldId" />
                                                <input type="hidden" id="@("FieldType__" + formBlockField.FieldId)" value="@formBlockField.FieldType" />
                                                <input type="hidden" id="@("FieldLabel__" + formBlockField.FieldId)" value="@formBlockField.FieldLabel" />
                                                <input type="hidden" id="@("FieldSource__" + formBlockField.FieldId)" value="@formBlockField.FieldSource" />
                                                <input type="hidden" id="@("RegistrationField__" + formBlockField.FieldId)" value="@formBlockField.RegistrationField" />
                                                <input type="hidden" id="@("PurchaseRegistrationField__" + formBlockField.FieldId)" value="@formBlockField.PurchaseRegistrationField" />
                                                <input type="hidden" id="@("FallbackFieldId__" + formBlockField.FieldId)" value="@formBlockField.FallbackFieldId" />
                                            }
                                        }
                                    </div>
                                    <div class="card-body">
                                        <div class="wrapper__flex-default">
                                            @foreach (var collectionLine in formBlock.FormFieldsCollectionLines)
                                            {
                                                <div class="card tile__form-fields-collection-line">
                                                    <h4>@collectionLine.Title</h4>
                                                    <p class="descriptor">@L("Model") <strong>@collectionLine.SubTitle</strong></p>

                                                    @foreach (var formField in collectionLine.FormFields)
                                                    {
                                                        <div class="form-group">
                                                            @switch (formField.FieldType)
                                                            {
                                                                case FieldTypeHelper.InputText:
                                                                    <partial name="/Areas/App/Views/FieldTypes/_InputText.cshtml" model="formField" view-data="ViewData" />
                                                                    break;
                                                                case FieldTypeHelper.InputNumber:
                                                                    <partial name="/Areas/App/Views/FieldTypes/_InputNumber.cshtml" model="formField" view-data="ViewData" />
                                                                    break;
                                                                case FieldTypeHelper.InputPassword:
                                                                    <partial name="/Areas/App/Views/FieldTypes/_InputPassword.cshtml" model="formField" view-data="ViewData" />
                                                                    break;
                                                                case FieldTypeHelper.DatePicker:
                                                                    <partial name="/Areas/App/Views/FieldTypes/_DatePicker.cshtml" model="formField" view-data="ViewData" />
                                                                    break;
                                                                case FieldTypeHelper.DropdownMenu:
                                                                    <partial name="/Areas/App/Views/FieldTypes/_DropdownMenu.cshtml" model="formField" view-data="ViewData" />
                                                                    break;
                                                                case FieldTypeHelper.CheckBox:
                                                                    <partial name="/Areas/App/Views/FieldTypes/_CheckBox.cshtml" model="formField" view-data="ViewData" />
                                                                    break;
                                                                case FieldTypeHelper.RadioButton:
                                                                    <partial name="/Areas/App/Views/FieldTypes/_RadioButton.cshtml" model="formField" view-data="ViewData" />
                                                                    break;
                                                                case FieldTypeHelper.Rating:
                                                                    <partial name="/Areas/App/Views/FieldTypes/_Rating.cshtml" model="formField" view-data="ViewData" />
                                                                    break;
                                                                case FieldTypeHelper.Tile:
                                                                    <partial name="/Areas/App/Views/FieldTypes/_Tile.cshtml" model="formField" view-data="ViewData" />
                                                                    break;
                                                                case FieldTypeHelper.IbanChecker:
                                                                    <partial name="/Areas/App/Views/FieldTypes/_IbanChecker.cshtml" model="formField" view-data="ViewData" />
                                                                    break;
                                                                case FieldTypeHelper.FileUploader:
                                                                    <partial name="/Areas/App/Views/FieldTypes/_FileUploader.cshtml" model="formField" view-data="ViewData" />
                                                                    break;
                                                                case FieldTypeHelper.Product:
                                                                    <partial name="/Areas/App/Views/FieldTypes/_Product.cshtml" model="formField" view-data="ViewData" />
                                                                    break;
                                                                case FieldTypeHelper.Remark:
                                                                    <partial name="/Areas/App/Views/FieldTypes/_Remark.cshtml" model="formField" view-data="ViewData" />
                                                                    break;
                                                                case FieldTypeHelper.RetailerLocation:
                                                                    <partial name="/Areas/App/Views/FieldTypes/_RetailerLocation.cshtml" model="formField" view-data="ViewData" />
                                                                    break;
                                                                case FieldTypeHelper.TextArea:
                                                                    <partial name="/Areas/App/Views/FieldTypes/_TextArea.cshtml" model="formField" view-data="ViewData" />
                                                                    break;
                                                                case FieldTypeHelper.UniqueCode:
                                                                case FieldTypeHelper.UniqueCodeByCampaign:
                                                                    <partial name="/Areas/App/Views/FieldTypes/_UniqueCode.cshtml" model="formField" view-data="ViewData" />
                                                                    break;
                                                                case FieldTypeHelper.Literal:
                                                                    <partial name="/Areas/App/Views/FieldTypes/_Literal.cshtml" model="formField" view-data="ViewData" />
                                                                    break;
                                                                default:
                                                                    <partial name="/Areas/App/Views/FieldTypes/_ControlNotImplemented.cshtml" model="formField" view-data="ViewData" />
                                                                    break;
                                                            }

                                                            @if (formField.FieldType != FieldTypeHelper.Literal)
                                                            {
                                                                <input type="hidden" id="@("LookupLineFieldId__" + formField.FieldLineId + formField.FieldId)" value="@(formField.FieldLineId.ToString() + @formField.FieldId.ToString())" />
                                                                <input type="hidden" id="@("LineFieldLineId__" + formField.FieldLineId + formField.FieldId)" value="@formField.FieldLineId" />
                                                                <input type="hidden" id="@("LineFieldId__" + formField.FieldLineId + formField.FieldId)" value="@formField.FieldId" />
                                                                <input type="hidden" id="@("LineFieldType__" + formField.FieldLineId + formField.FieldId)" value="@formField.FieldType" />
                                                                <input type="hidden" id="@("LineFieldLabel__" + formField.FieldLineId + formField.FieldId)" value="@formField.FieldLabel" />
                                                                <input type="hidden" id="@("LineFieldSource__" + formField.FieldLineId + formField.FieldId)" value="@formField.FieldSource" />
                                                                <input type="hidden" id="@("LineRegistrationField__" + formField.FieldLineId + formField.FieldId)" value="@formField.RegistrationField" />
                                                                <input type="hidden" id="@("LinePurchaseRegistrationField__" + formField.FieldLineId + formField.FieldId)" value="@formField.PurchaseRegistrationField" />
                                                                <input type="hidden" id="@("LineFallbackFieldId__" + formField.FieldLineId + formField.FieldId)" value="@formField.FallbackFieldId" />
                                                            }
                                                        </div><!-- .input-group -->
                                                    }
                                                </div><!-- .tile__form-fields-collection-line -->
                                            }
                                        </div><!-- .wrapper__flex-default -->
                                    </div>
                                }
                                else
                                {
                                    <div class="card-body">
                                        <div class="wrapper__flex-default">
                                            @foreach (var collectionLine in formBlock.FormFieldsCollectionLines)
                                            {
                                                <div class="card tile__form-fields-collection-line">
                                                    <h4>@collectionLine.Title</h4>
                                                    <p class="descriptor">@L("Model") <strong>@collectionLine.SubTitle</strong></p>

                                                    @foreach (var formField in collectionLine.FormFields)
                                                    {
                                                        <div class="form-group">
                                                            @switch (formField.FieldType)
                                                            {
                                                                case FieldTypeHelper.InputText:
                                                                    <partial name="/Areas/App/Views/FieldTypes/_InputText.cshtml" model="formField" view-data="ViewData" />
                                                                    break;
                                                                case FieldTypeHelper.InputNumber:
                                                                    <partial name="/Areas/App/Views/FieldTypes/_InputNumber.cshtml" model="formField" view-data="ViewData" />
                                                                    break;
                                                                case FieldTypeHelper.InputPassword:
                                                                    <partial name="/Areas/App/Views/FieldTypes/_InputPassword.cshtml" model="formField" view-data="ViewData" />
                                                                    break;
                                                                case FieldTypeHelper.DatePicker:
                                                                    <partial name="/Areas/App/Views/FieldTypes/_DatePicker.cshtml" model="formField" view-data="ViewData" />
                                                                    break;
                                                                case FieldTypeHelper.DropdownMenu:
                                                                    <partial name="/Areas/App/Views/FieldTypes/_DropdownMenu.cshtml" model="formField" view-data="ViewData" />
                                                                    break;
                                                                case FieldTypeHelper.CheckBox:
                                                                    <partial name="/Areas/App/Views/FieldTypes/_CheckBox.cshtml" model="formField" view-data="ViewData" />
                                                                    break;
                                                                case FieldTypeHelper.RadioButton:
                                                                    <partial name="/Areas/App/Views/FieldTypes/_RadioButton.cshtml" model="formField" view-data="ViewData" />
                                                                    break;
                                                                case FieldTypeHelper.Rating:
                                                                    <partial name="/Areas/App/Views/FieldTypes/_Rating.cshtml" model="formField" view-data="ViewData" />
                                                                    break;
                                                                case FieldTypeHelper.Tile:
                                                                    <partial name="/Areas/App/Views/FieldTypes/_Tile.cshtml" model="formField" view-data="ViewData" />
                                                                    break;
                                                                case FieldTypeHelper.IbanChecker:
                                                                    <partial name="/Areas/App/Views/FieldTypes/_IbanChecker.cshtml" model="formField" view-data="ViewData" />
                                                                    break;
                                                                case FieldTypeHelper.FileUploader:
                                                                    <partial name="/Areas/App/Views/FieldTypes/_FileUploader.cshtml" model="formField" view-data="ViewData" />
                                                                    break;
                                                                case FieldTypeHelper.Product:
                                                                    <partial name="/Areas/App/Views/FieldTypes/_Product.cshtml" model="formField" view-data="ViewData" />
                                                                    break;
                                                                case FieldTypeHelper.Remark:
                                                                    <partial name="/Areas/App/Views/FieldTypes/_Remark.cshtml" model="formField" view-data="ViewData" />
                                                                    break;
                                                                case FieldTypeHelper.RetailerLocation:
                                                                    <partial name="/Areas/App/Views/FieldTypes/_RetailerLocation.cshtml" model="formField" view-data="ViewData" />
                                                                    break;
                                                                case FieldTypeHelper.TextArea:
                                                                    <partial name="/Areas/App/Views/FieldTypes/_TextArea.cshtml" model="formField" view-data="ViewData" />
                                                                    break;
                                                                case FieldTypeHelper.UniqueCode:
                                                                case FieldTypeHelper.UniqueCodeByCampaign:
                                                                    <partial name="/Areas/App/Views/FieldTypes/_UniqueCode.cshtml" model="formField" view-data="ViewData" />
                                                                    break;
                                                                case FieldTypeHelper.Literal:
                                                                    <partial name="/Areas/App/Views/FieldTypes/_Literal.cshtml" model="formField" view-data="ViewData" />
                                                                    break;
                                                                default:
                                                                    <partial name="/Areas/App/Views/FieldTypes/_ControlNotImplemented.cshtml" model="formField" view-data="ViewData" />
                                                                    break;
                                                            }

                                                            @if (formField.FieldType != FieldTypeHelper.Literal)
                                                            {
                                                                <input type="hidden" id="@("LookupLineFieldId__" + formField.FieldLineId + formField.FieldId)" value="@(formField.FieldLineId.ToString() + @formField.FieldId.ToString())" />
                                                                <input type="hidden" id="@("LineFieldLineId__" + formField.FieldLineId + formField.FieldId)" value="@formField.FieldLineId" />
                                                                <input type="hidden" id="@("LineFieldId__" + formField.FieldLineId + formField.FieldId)" value="@formField.FieldId" />
                                                                <input type="hidden" id="@("LineFieldType__" + formField.FieldLineId + formField.FieldId)" value="@formField.FieldType" />
                                                                <input type="hidden" id="@("LineFieldLabel__" + formField.FieldLineId + formField.FieldId)" value="@formField.FieldLabel" />
                                                                <input type="hidden" id="@("LineFieldSource__" + formField.FieldLineId + formField.FieldId)" value="@formField.FieldSource" />
                                                                <input type="hidden" id="@("LineRegistrationField__" + formField.FieldLineId + formField.FieldId)" value="@formField.RegistrationField" />
                                                                <input type="hidden" id="@("LinePurchaseRegistrationField__" + formField.FieldLineId + formField.FieldId)" value="@formField.PurchaseRegistrationField" />
                                                                <input type="hidden" id="@("LineFallbackFieldId__" + formField.FieldLineId + formField.FieldId)" value="@formField.FallbackFieldId" />
                                                            }
                                                        </div><!-- .input-group -->
                                                    }
                                                </div><!-- .tile__form-fields-collection-line -->
                                            }
                                        </div><!-- .wrapper__flex-default -->
                                    </div>
                                }
                            </div>
                        }

                        <partial name="/Areas/App/Views/Registrations/_RelatedRegistrations.cshtml" model='new RelatedRegistrationsViewModel { RelatedRegistrations = Model.RelatedRegistrationsByEmail, TypeOfRelation = "Email" } ' />
                        <partial name="/Areas/App/Views/Registrations/_RelatedRegistrations.cshtml" model='new RelatedRegistrationsViewModel { RelatedRegistrations = Model.RelatedRegistrationsBySerialNumber, TypeOfRelation = "SerialNumber" } ' />
                        <partial name="/Areas/App/Views/Registrations/_RegistrationHistoryEntries.cshtml" model="new RegistrationHistoryEntriesViewModel { RegistrationHistoryEntries = Model.RegistrationHistoryEntries }" />
                        <partial name="/Areas/App/Views/Registrations/_RegistrationMessageHistoryEntries.cshtml" model="new RegistrationMessageHistoryEntriesViewModel { RegistrationMessageHistoryEntries = Model.RegistrationMessageHistoryEntries }" />
                    </div>
                </div>

                <div class="kt-portlet__foot">
                    <div class="row align-items-center">
                        <div id="lowWrapper" class="col-12">
                            <div class="row row__registration-approved">
                                <div class="col-12 lh-33">
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text">@L("RegistrationIsApproved")</span>
                                        </div>
                                        <div class="input-group-append">
                                            <div class="input-group-text">
                                                <label class="switch">
                                                    <input id="switch__choice-registration-approved" type="checkbox" disabled="@(!Model.StatusIsChangeable)">
                                                    <span class="slider round"></span>
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row row__registration-incomplete">
                                <div class="col-12 lh-33">
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <div class="input-group-text">@L("RegistrationIsIncomplete")</div>
                                        </div>
                                        <div class="input-group-append">
                                            <div class="input-group-text">
                                                <label class="switch">
                                                    <input id="switch__choice-registration-incomplete" type="checkbox" disabled="@(!Model.StatusIsChangeable)">
                                                    <span class="slider round"></span>
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row row__registration-rejected">
                                <div class="col-12 lh-33">
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <div class="input-group-text">@L("RegistrationIsRejected")</div>
                                        </div>
                                        <div class="input-group-append">
                                            <div class="input-group-text">
                                                <label class="switch">
                                                    <input id="switch__choice-registration-rejected" type="checkbox" disabled="@(!Model.StatusIsChangeable)">
                                                    <span class="slider round"></span>
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="alert wrapper__warning-choose-incomplete" role="alert">
                                <div class="row">
                                    <div class="col-12">
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text">@L("IncompleteReason")</span>
                                            </div>
                                            <div class="input-group-append">
                                                <select class="form-control dropdown__incomplete-reason" disabled="@(!Model.StatusIsChangeable)">
                                                    @{
                                                        var selectedFound_i = false;

                                                        if ((Model.SelectedIncompleteReasonId == null || Model.SelectedIncompleteReasonId == -1))
                                                        {
                                                            <option value="-1" selected>@L("ChooseIncompleteReason")</option>
                                                            selectedFound_i = true;
                                                        }
                                                        else
                                                        {
                                                            <option value="-1">@L("ChooseIncompleteReason")</option>
                                                        }

                                                        for (var i = 0; i < Model.IncompleteReasons.Count(); i++)
                                                        {
                                                            var indexedElement = Model.IncompleteReasons.ElementAt(i).RejectionReason;

                                                            if (!selectedFound_i)
                                                            {
                                                                if (Model.SelectedIncompleteReasonId == Model.IncompleteReasons.ElementAt(i).RejectionReason.Id)
                                                                {
                                                                    <option value="@indexedElement.Id" selected>@indexedElement.Description</option>
                                                                    selectedFound_i = true;
                                                                }
                                                                else
                                                                {
                                                                    <option value="@indexedElement.Id">@indexedElement.Description</option>
                                                                }
                                                            }
                                                            else
                                                            {
                                                                <option value="@indexedElement.Id">@indexedElement.Description</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                            </div><!-- .input-group-append -->
                                        </div><!-- .input-group -->
                                    </div><!-- .col-12 -->
                                </div><!-- .row -->
                            </div>

                            <div class="alert wrapper__warning-choose-rejection" role="alert">
                                <div class="row">
                                    <div class="col-12">
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text">@L("RejectionReason")</span>
                                            </div>
                                            <div class="input-group-append">
                                                <select class="form-control dropdown__rejection-reason" disabled="@(!Model.StatusIsChangeable)">
                                                    @{
                                                        var selectedFound_r = false;

                                                        if ((Model.SelectedRejectionReasonId == null || Model.SelectedRejectionReasonId == -1))
                                                        {
                                                            <option value="-1" selected>@L("ChooseRejectionReason")</option>
                                                            selectedFound_r = true;
                                                        }
                                                        else
                                                        {
                                                            <option value="-1">@L("ChooseRejectionReason")</option>
                                                        }

                                                        for (var i = 0; i < Model.RejectionReasons.Count(); i++)
                                                        {
                                                            var indexedElement = Model.RejectionReasons.ElementAt(i).RejectionReason;

                                                            if (!selectedFound_r)
                                                            {
                                                                if (Model.SelectedRejectionReasonId == Model.RejectionReasons.ElementAt(i).RejectionReason.Id)
                                                                {
                                                                    <option value="@indexedElement.Id" selected>@indexedElement.Description</option>
                                                                    selectedFound_r = true;
                                                                }
                                                                else
                                                                {
                                                                    <option value="@indexedElement.Id">@indexedElement.Description</option>
                                                                }
                                                            }
                                                            else
                                                            {
                                                                <option value="@indexedElement.Id">@indexedElement.Description</option>
                                                            }
                                                        }
                                                    }
                                                </select>
                                            </div><!-- .input-group-append -->
                                        </div><!-- .input-group -->
                                    </div><!-- .col-12 -->
                                </div><!-- .row -->
                            </div><!-- .wrapper__warning-choose-rejection -->
                        </div><!-- .col-12 -->

                        <div class="col">
                            <button type="button" id="saveBtn" class="btn btn-success float-right"><i class="fa fa-save"></i> @L("Save")</button>
                            <button type="button" id="goBackBtn" class="btn btn-secondary float-right mr-3 ml-3">@L("GoBack")</button>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>