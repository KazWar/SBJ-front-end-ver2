
@using System.Globalization
@using RMS.Web.Areas.App.Models.Common.Modals
@using RMS.Web.Areas.App.Models.FormFields
@model CreateOrEditFormFieldModalViewModel

@await Html.PartialAsync("~/Areas/App/Views/Common/Modals/_ModalHeader.cshtml", new ModalHeaderViewModel(Model.IsEditMode ? (L("EditFormField")) : L("CreateNewFormField")))

<div class="modal-body">
    <div id="FormFieldInformationsTab">
        <form name="FormFieldInformationsForm" role="form" novalidate class="form-validation">

            @if (Model.IsEditMode)
            {
                <input type="hidden" name="id" value="@Model.FormField.Id" />
            }


            <div class="form-group m-form__group">
                <label for="FieldTypeDescription">@L("FieldType")</label>
                <div class="input-group">
                    <input class="form-control" id="FieldTypeDescription" name="fieldTypeDescription" value="@Model.FieldTypeDescription" type="text" disabled>
                    <div class="input-group-append">
                        <button class="btn btn-primary blue" id="OpenFieldTypeLookupTableButton" type="button"><i class="fa fa-search"></i> @L("Pick")</button>
                    </div>
                    <div class="input-group-prepend">
                        <button class="btn btn-danger btn-icon" type="button" id="ClearFieldTypeDescriptionButton"><i class="fa fa-times"></i></button>
                    </div>
                </div>
            </div>

            @if (Model.IsEditMode)
            {
                <input class="form-control" id="FormField_FieldTypeId" value="@Model.FormField.FieldTypeId" type="text" name="fieldTypeId" required hidden />
            }
            else
            {
                <input class="form-control" id="FormField_FieldTypeId" value="" type="text" name="fieldTypeId" required hidden />
            }



				
								<div class="form-group">
									<label for="FormField_Description">@L("Description")</label>
									<input class="form-control" id="FormField_Description" value="@Model.FormField.Description" type="text" name="description"     />
								</div>
					
								<div class="form-group">
									<label for="FormField_Label">@L("Label")</label>
									<input class="form-control" id="FormField_Label" value="@Model.FormField.Label" type="text" name="label"     />
								</div>
					
								<div class="form-group">
									<label for="FormField_DefaultValue">@L("DefaultValue")</label>
									<input class="form-control" id="FormField_DefaultValue" value="@Model.FormField.DefaultValue" type="text" name="defaultValue"     />
								</div>
					
								<div class="form-group">
									<label for="FormField_MaxLength">@L("MaxLength")</label>
									<input class="form-control m-input" id="FormField_MaxLength" value="@Model.FormField.MaxLength.ToString(CultureInfo.InvariantCulture)" type="number" name="maxLength"  />
								</div>
					
								<div class="m-checkbox-list">
									<label for="FormField_Required" class="kt-checkbox">
										<input id="FormField_Required" type="checkbox" name="required" value="true" @Html.Raw(Model.FormField.Required ?"checked=\"checked\"":"") />
										@L("Required")
										<span></span>
									</label>
								</div>
					
								<div class="m-checkbox-list">
									<label for="FormField_ReadOnly" class="kt-checkbox">
										<input id="FormField_ReadOnly" type="checkbox" name="readOnly" value="true" @Html.Raw(Model.FormField.ReadOnly ?"checked=\"checked\"":"") />
										@L("ReadOnly")
										<span></span>
									</label>
								</div>
					
								<div class="form-group">
									<label for="FormField_InputMask">@L("InputMask")</label>
									<input class="form-control" id="FormField_InputMask" value="@Model.FormField.InputMask" type="text" name="inputMask"     />
								</div>
					
								<div class="form-group">
									<label for="FormField_RegularExpression">@L("RegularExpression")</label>
									<input class="form-control" id="FormField_RegularExpression" value="@Model.FormField.RegularExpression" type="text" name="regularExpression"     />
								</div>
					
								<div class="form-group">
									<label for="FormField_ValidationApiCall">@L("ValidationApiCall")</label>
									<input class="form-control" id="FormField_ValidationApiCall" value="@Model.FormField.ValidationApiCall" type="text" name="validationApiCall"     />
								</div>
					
								<div class="form-group">
									<label for="FormField_RegistrationField">@L("RegistrationField")</label>
									<input class="form-control" id="FormField_RegistrationField" value="@Model.FormField.RegistrationField" type="text" name="registrationField"     />
								</div>
					
								<div class="form-group">
									<label for="FormField_PurchaseRegistrationField">@L("PurchaseRegistrationField")</label>
									<input class="form-control" id="FormField_PurchaseRegistrationField" value="@Model.FormField.PurchaseRegistrationField" type="text" name="purchaseRegistrationField"     />
								</div>
					
								<div class="m-checkbox-list">
									<label for="FormField_IsPurchaseRegistration" class="kt-checkbox">
										<input id="FormField_IsPurchaseRegistration" type="checkbox" name="isPurchaseRegistration" value="true" @Html.Raw(Model.FormField.IsPurchaseRegistration ?"checked=\"checked\"":"") />
										@L("IsPurchaseRegistration")
										<span></span>
									</label>
								</div>
					

        </form>
    </div>
</div>

@await Html.PartialAsync("~/Areas/App/Views/Common/Modals/_ModalFooterWithSaveAndCancel.cshtml")
