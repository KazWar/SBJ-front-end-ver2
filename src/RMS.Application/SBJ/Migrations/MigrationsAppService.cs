using Abp.Authorization;
using Abp.Domain.Repositories;
using RMS.Authorization;
using RMS.SBJ.CampaignProcesses;
using RMS.SBJ.CodeTypeTables;
using RMS.SBJ.Company;
using RMS.SBJ.Forms;
using RMS.SBJ.HandlingBatch;
using RMS.SBJ.PurchaseRegistrationFields;
using RMS.SBJ.RegistrationFields;
using RMS.SBJ.SystemTables;
using System;
using System.Threading.Tasks;

namespace RMS.SBJ.Migrations
{
    /// <summary>
    /// Used for either migrating pending migrations (to-do) or seeding a tenant database.
    /// </summary>
    [AbpAuthorize(AppPermissions.Pages_Administration)]
    public class MigrationsAppService : RMSAppServiceBase, IMigrationsAppService
    {
        private readonly IRepository<Address, long> _addressRepository;
        private readonly IRepository<CampaignType, long> _campaignTypeRepository;
        private readonly IRepository<CampaignTypeEvent, long> _campaignTypeEventRepository;
        private readonly IRepository<CampaignTypeEventRegistrationStatus, long> _campaignTypeEventRegistrationStatusRepository;
        private readonly IRepository<Company.Company, long> _companyRepository;
        private readonly IRepository<Country, long> _countryRepository;
        private readonly IRepository<FieldType, long> _fieldTypeRepository;
        private readonly IRepository<Form, long> _formRepository;
        private readonly IRepository<FormBlock, long> _formBlockRepository;
        private readonly IRepository<FormBlockField, long> _formBlockFieldRepository;
        private readonly IRepository<FormField, long> _formFieldRepository;
        private readonly IRepository<FormFieldTranslation, long> _formFieldTranslationRepository;
        private readonly IRepository<FormFieldValueList, long> _formFieldValueListRepository;
        private readonly IRepository<FormLocale, long> _formLocaleRepository;
        private readonly IRepository<HandlingBatchStatus, long> _handlingBatchStatusRepository;
        private readonly IRepository<HandlingBatchLineStatus, long> _handlingBatchLineStatusRepository;
        private readonly IRepository<ListValue, long> _listValueRepository;
        private readonly IRepository<ListValueTranslation, long> _listValueTranslationRepository;
        private readonly IRepository<Locale, long> _localeRepository;
        private readonly IRepository<Message, long> _messageRepository;
        private readonly IRepository<MessageComponent, long> _messageComponentRepository;
        private readonly IRepository<MessageComponentContent, long> _messageComponentContentRepository;
        private readonly IRepository<MessageComponentType, long> _messageComponentTypeRepository;
        private readonly IRepository<MessageContentTranslation, long> _messageContentTranslationRepository;
        private readonly IRepository<MessageType, long> _messageTypeRepository;
        private readonly IRepository<MessageVariable, long> _messageVariableRepository;
        private readonly IRepository<ProcessEvent, long> _processEventRepository;
        private readonly IRepository<RegistrationStatus, long> _registrationStatusRepository;
        private readonly IRepository<RejectionReason, long> _rejectionReasonRepository;
        private readonly IRepository<RejectionReasonTranslation, long> _rejectionReasonTranslationRepository;
        private readonly IRepository<RegistrationField, long> _registrationFieldRepository;
        private readonly IRepository<PurchaseRegistrationField, long> _purchaseRegistrationFieldRepository;
        private readonly IRepository<SystemLevel, long> _systemLevelRepository;
        private readonly IRepository<ValueList, long> _valueListRepository;

        public MigrationsAppService(
            IRepository<Address, long> addressRepository,
            IRepository<CampaignType, long> campaignTypeRepository,
            IRepository<CampaignTypeEvent, long> campaignTypeEventRepository,
            IRepository<CampaignTypeEventRegistrationStatus, long> campaignTypeEventRegistrationStatusRepository,
            IRepository<Company.Company, long> companyRepository,
            IRepository<Country, long> countryRepository,
            IRepository<FieldType, long> fieldTypeRepository,
            IRepository<Form, long> formRepository,
            IRepository<FormBlock, long> formBlockRepository,
            IRepository<FormBlockField, long> formBlockFieldRepository,
            IRepository<FormField, long> formFieldRepository,
            IRepository<FormFieldTranslation, long> formFieldTranslationRepository,
            IRepository<FormFieldValueList, long> formFieldValueListRepository,
            IRepository<FormLocale, long> formLocaleRepository,
            IRepository<HandlingBatchStatus, long> handlingBatchStatusRepository,
            IRepository<HandlingBatchLineStatus, long> handlingBatchLineStatusRepository,
            IRepository<ListValue, long> listValueRepository,
            IRepository<ListValueTranslation, long> listValueTranslationRepository,
            IRepository<Locale, long> localeRepository,
            IRepository<Message, long> messageRepository,
            IRepository<MessageComponent, long> messageComponentRepository,
            IRepository<MessageComponentContent, long> messageComponentContentRepository,
            IRepository<MessageComponentType, long> messageComponentTypeRepository,
            IRepository<MessageContentTranslation, long> messageContentTranslationRepository,
            IRepository<MessageType, long> messageTypeRepository,
            IRepository<MessageVariable, long> messageVariableRepository,
            IRepository<ProcessEvent, long> processEventRepository,
            IRepository<RegistrationStatus, long> registrationStatusRepository,
            IRepository<RejectionReason, long> rejectionReasonRepository,
            IRepository<RejectionReasonTranslation, long> rejectionReasonTranslationRepository,
            IRepository<RegistrationField, long> registrationFieldRepository,
            IRepository<PurchaseRegistrationField, long> purchaseRegistrationFieldRepository,
            IRepository<SystemLevel, long> systemLevelRepository,
            IRepository<ValueList, long> valueListRepository)
        {
            _addressRepository = addressRepository;
            _campaignTypeRepository = campaignTypeRepository;
            _campaignTypeEventRepository = campaignTypeEventRepository;
            _campaignTypeEventRegistrationStatusRepository = campaignTypeEventRegistrationStatusRepository;
            _companyRepository = companyRepository;
            _countryRepository = countryRepository;
            _fieldTypeRepository = fieldTypeRepository;
            _formRepository = formRepository;
            _formBlockRepository = formBlockRepository;
            _formBlockFieldRepository = formBlockFieldRepository;
            _formFieldRepository = formFieldRepository;
            _formFieldTranslationRepository = formFieldTranslationRepository;
            _formFieldValueListRepository = formFieldValueListRepository;
            _formLocaleRepository = formLocaleRepository;
            _handlingBatchStatusRepository = handlingBatchStatusRepository;
            _handlingBatchLineStatusRepository = handlingBatchLineStatusRepository;
            _listValueRepository = listValueRepository;
            _listValueTranslationRepository = listValueTranslationRepository;
            _localeRepository = localeRepository;
            _messageRepository = messageRepository;
            _messageComponentRepository = messageComponentRepository;
            _messageComponentContentRepository = messageComponentContentRepository;
            _messageComponentTypeRepository = messageComponentTypeRepository;
            _messageContentTranslationRepository = messageContentTranslationRepository;
            _messageTypeRepository = messageTypeRepository;
            _messageVariableRepository = messageVariableRepository;
            _processEventRepository = processEventRepository;
            _registrationStatusRepository = registrationStatusRepository;
            _rejectionReasonRepository = rejectionReasonRepository;
            _rejectionReasonTranslationRepository = rejectionReasonTranslationRepository;
            _registrationFieldRepository = registrationFieldRepository;
            _purchaseRegistrationFieldRepository = purchaseRegistrationFieldRepository;
            _systemLevelRepository = systemLevelRepository;
            _valueListRepository = valueListRepository;
        }

        public async Task<bool> SeedDatabase()
        {
            var currentTenant = await GetCurrentTenantAsync();
            var tenantId = currentTenant.Id;
            if (!(tenantId > 1))
            {
                return false;
            }

            try
            {
                using var uow = UnitOfWorkManager.Begin();
                using (CurrentUnitOfWork.SetTenantId(tenantId))
                {
                    #region Inserts
                    //system levels, campaign types, countries & locales
                    var systemLevelCompanyId = await _systemLevelRepository.InsertAndGetIdAsync(new SystemLevel { TenantId = tenantId, CreationTime = DateTime.Now, IsDeleted = false, Description = "Company" });
                    var systemLevelCampaignId = await _systemLevelRepository.InsertAndGetIdAsync(new SystemLevel { TenantId = tenantId, CreationTime = DateTime.Now, IsDeleted = false, Description = "Campaign" });

                    var campaignTypeCashRefundId = await _campaignTypeRepository.InsertAndGetIdAsync(new CampaignType { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, IsActive = true, Code = "CR", Name = "Cash Refund" });
                    var campaignTypePremiumdId = await _campaignTypeRepository.InsertAndGetIdAsync(new CampaignType { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, IsActive = true, Code = "PM", Name = "Premium" });
                    var campaignTypeActivationCodeId = await _campaignTypeRepository.InsertAndGetIdAsync(new CampaignType { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, IsActive = true, Code = "AC", Name = "Activation Code" });

                    var countryNlId = await _countryRepository.InsertAndGetIdAsync(new Country { TenantId = tenantId, CreationTime = DateTime.Now, CountryCode = "NL", Description = "Netherlands" });
                    var countryBeId = await _countryRepository.InsertAndGetIdAsync(new Country { TenantId = tenantId, CreationTime = DateTime.Now, CountryCode = "BE", Description = "Belgium" });

                    var localeNlNlId = await _localeRepository.InsertAndGetIdAsync(new Locale { TenantId = tenantId, CountryId = countryNlId, CreationTime = DateTime.Now, IsActive = true, IsDeleted = false, LanguageCode = "nl", Description = "nl_nl" });
                    var localeBeNlId = await _localeRepository.InsertAndGetIdAsync(new Locale { TenantId = tenantId, CountryId = countryBeId, CreationTime = DateTime.Now, IsActive = true, IsDeleted = false, LanguageCode = "nl", Description = "be_nl" });
                    var localeBeFrId = await _localeRepository.InsertAndGetIdAsync(new Locale { TenantId = tenantId, CountryId = countryBeId, CreationTime = DateTime.Now, IsActive = true, IsDeleted = false, LanguageCode = "fr", Description = "be_fr" });
                    var localeGlobalId = await _localeRepository.InsertAndGetIdAsync(new Locale { TenantId = tenantId, CountryId = countryNlId, CreationTime = DateTime.Now, IsActive = false, IsDeleted = false, LanguageCode = "en", Description = "global" });
                    
                    //field types
                    var fieldTypeInputTextId = await _fieldTypeRepository.InsertAndGetIdAsync(new FieldType { TenantId = tenantId, CreationTime = DateTime.Now, IsDeleted = false, Description = "InputText" });
                    var fieldTypeInputPasswordId = await _fieldTypeRepository.InsertAndGetIdAsync(new FieldType { TenantId = tenantId, CreationTime = DateTime.Now, IsDeleted = false, Description = "InputPassword" });
                    var fieldTypeFileUploaderId = await _fieldTypeRepository.InsertAndGetIdAsync(new FieldType { TenantId = tenantId, CreationTime = DateTime.Now, IsDeleted = false, Description = "FileUploader" });
                    var fieldTypeRatingId = await _fieldTypeRepository.InsertAndGetIdAsync(new FieldType { TenantId = tenantId, CreationTime = DateTime.Now, IsDeleted = false, Description = "Rating" });
                    var fieldTypeDropdownId = await _fieldTypeRepository.InsertAndGetIdAsync(new FieldType { TenantId = tenantId, CreationTime = DateTime.Now, IsDeleted = false, Description = "DropdownMenu" });
                    var fieldTypeDatePickerId = await _fieldTypeRepository.InsertAndGetIdAsync(new FieldType { TenantId = tenantId, CreationTime = DateTime.Now, IsDeleted = false, Description = "DatePicker" });
                    var fieldTypeInputNumberId = await _fieldTypeRepository.InsertAndGetIdAsync(new FieldType { TenantId = tenantId, CreationTime = DateTime.Now, IsDeleted = false, Description = "InputNumber" });
                    var fieldTypeRadioButtonId = await _fieldTypeRepository.InsertAndGetIdAsync(new FieldType { TenantId = tenantId, CreationTime = DateTime.Now, IsDeleted = false, Description = "RadioButton" });
                    var fieldTypeCheckBoxId = await _fieldTypeRepository.InsertAndGetIdAsync(new FieldType { TenantId = tenantId, CreationTime = DateTime.Now, IsDeleted = false, Description = "CheckBox" });
                    var fieldTypeIbanCheckerId = await _fieldTypeRepository.InsertAndGetIdAsync(new FieldType { TenantId = tenantId, CreationTime = DateTime.Now, IsDeleted = false, Description = "IbanChecker" });
                    var fieldTypeTileId = await _fieldTypeRepository.InsertAndGetIdAsync(new FieldType { TenantId = tenantId, CreationTime = DateTime.Now, IsDeleted = false, Description = "Tile" });
                    var fieldTypeProductId = await _fieldTypeRepository.InsertAndGetIdAsync(new FieldType { TenantId = tenantId, CreationTime = DateTime.Now, IsDeleted = false, Description = "Product" });
                    var fieldTypeProductPremiumLiteId = await _fieldTypeRepository.InsertAndGetIdAsync(new FieldType { TenantId = tenantId, CreationTime = DateTime.Now, IsDeleted = false, Description = "ProductPremiumLite" });
                    var fieldTypeProductPremiumQuantityId = await _fieldTypeRepository.InsertAndGetIdAsync(new FieldType { TenantId = tenantId, CreationTime = DateTime.Now, IsDeleted = false, Description = "ProductPremiumQuantity" });
                    var fieldTypePurchaseRegistrationId = await _fieldTypeRepository.InsertAndGetIdAsync(new FieldType { TenantId = tenantId, CreationTime = DateTime.Now, IsDeleted = false, Description = "PurchaseRegistration" });
                    var fieldTypePurchaseRegistrationLiteId = await _fieldTypeRepository.InsertAndGetIdAsync(new FieldType { TenantId = tenantId, CreationTime = DateTime.Now, IsDeleted = false, Description = "PurchaseRegistrationLite" });
                    var fieldTypePurchaseRegistrationSerialId = await _fieldTypeRepository.InsertAndGetIdAsync(new FieldType { TenantId = tenantId, CreationTime = DateTime.Now, IsDeleted = false, Description = "PurchaseRegistrationSerial" });
                    var fieldTypeRetailerLocationId = await _fieldTypeRepository.InsertAndGetIdAsync(new FieldType { TenantId = tenantId, CreationTime = DateTime.Now, IsDeleted = false, Description = "RetailerLocation" });
                    var fieldTypeRetailerRadioButtonId = await _fieldTypeRepository.InsertAndGetIdAsync(new FieldType { TenantId = tenantId, CreationTime = DateTime.Now, IsDeleted = false, Description = "RetailerRadioButton" });
                    var fieldTypeTextAreaId = await _fieldTypeRepository.InsertAndGetIdAsync(new FieldType { TenantId = tenantId, CreationTime = DateTime.Now, IsDeleted = false, Description = "TextArea" });
                    var fieldTypeRemarkId = await _fieldTypeRepository.InsertAndGetIdAsync(new FieldType { TenantId = tenantId, CreationTime = DateTime.Now, IsDeleted = false, Description = "Remark" });
                    var fieldTypeUniqueCode = await _fieldTypeRepository.InsertAndGetIdAsync(new FieldType { TenantId = tenantId, CreationTime = DateTime.Now, IsDeleted = false, Description = "UniqueCode" });
                    var fieldTypeUniqueCodeByCampaign = await _fieldTypeRepository.InsertAndGetIdAsync(new FieldType { TenantId = tenantId, CreationTime = DateTime.Now, IsDeleted = false, Description = "UniqueCodeByCampaign" });
                    var fieldTypeHtmlText = await _fieldTypeRepository.InsertAndGetIdAsync(new FieldType { TenantId = tenantId, CreationTime = DateTime.Now, IsDeleted = false, Description = "HtmlText" });
                    var fieldTypePageSeparatorId = await _fieldTypeRepository.InsertAndGetIdAsync(new FieldType { TenantId = tenantId, CreationTime = DateTime.Now, IsDeleted = false, Description = "PageSeparator" });

                    //form fields
                    //(default registration fields)
                    var formFieldGenderId = await _formFieldRepository.InsertAndGetIdAsync(new FormField { TenantId = tenantId, FieldTypeId = fieldTypeDropdownId, CreationTime = DateTime.Now, IsDeleted = false, Description = "Gender", Label = "Gender", MaxLength = 0, Required = true, ReadOnly = false, RegistrationField = "Gender", FieldName = "Gender" });
                    var formFieldFirstNameId = await _formFieldRepository.InsertAndGetIdAsync(new FormField { TenantId = tenantId, FieldTypeId = fieldTypeInputTextId, CreationTime = DateTime.Now, IsDeleted = false, Description = "First Name", Label = "First Name", MaxLength = 255, Required = true, ReadOnly = false, RegistrationField = "FirstName", FieldName = "FirstName" });
                    var formFieldLastNameId = await _formFieldRepository.InsertAndGetIdAsync(new FormField { TenantId = tenantId, FieldTypeId = fieldTypeInputTextId, CreationTime = DateTime.Now, IsDeleted = false, Description = "Last Name", Label = "Last Name", MaxLength = 255, Required = true, ReadOnly = false, RegistrationField = "LastName", FieldName = "LastName" });
                    var formFieldCompanyNameId = await _formFieldRepository.InsertAndGetIdAsync(new FormField { TenantId = tenantId, FieldTypeId = fieldTypeInputTextId, CreationTime = DateTime.Now, IsDeleted = false, Description = "Company Name", Label = "Company Name", MaxLength = 255, Required = false, ReadOnly = false, RegistrationField = "CompanyName", FieldName = "CompanyName" });
                    var formFieldStreetNameId = await _formFieldRepository.InsertAndGetIdAsync(new FormField { TenantId = tenantId, FieldTypeId = fieldTypeInputTextId, CreationTime = DateTime.Now, IsDeleted = false, Description = "Street Name", Label = "Street Name", MaxLength = 255, Required = true, ReadOnly = false, RegistrationField = "Street", FieldName = "StreetName" });
                    var formFieldHouseNumberId = await _formFieldRepository.InsertAndGetIdAsync(new FormField { TenantId = tenantId, FieldTypeId = fieldTypeInputTextId, CreationTime = DateTime.Now, IsDeleted = false, Description = "House Number", Label = "House Number", MaxLength = 255, Required = true, ReadOnly = false, RegistrationField = "HouseNr", FieldName = "HouseNumber" });
                    var formFieldPostalCodeId = await _formFieldRepository.InsertAndGetIdAsync(new FormField { TenantId = tenantId, FieldTypeId = fieldTypeInputTextId, CreationTime = DateTime.Now, IsDeleted = false, Description = "Zip Code", Label = "Zip Code", MaxLength = 6, Required = true, ReadOnly = false, RegistrationField = "PostalCode", FieldName = "ZipCode" });
                    var formFieldResidenceId = await _formFieldRepository.InsertAndGetIdAsync(new FormField { TenantId = tenantId, FieldTypeId = fieldTypeInputTextId, CreationTime = DateTime.Now, IsDeleted = false, Description = "Residence", Label = "Residence", MaxLength = 255, Required = true, ReadOnly = false, RegistrationField = "City", FieldName = "Residence" });
                    var formFieldEmailAddressId = await _formFieldRepository.InsertAndGetIdAsync(new FormField { TenantId = tenantId, FieldTypeId = fieldTypeInputTextId, CreationTime = DateTime.Now, IsDeleted = false, Description = "Email Address", Label = "Email Address", MaxLength = 255, Required = true, ReadOnly = false, RegistrationField = "EmailAddress", FieldName = "EmailAddress" });
                    var formFieldPhoneNumberId = await _formFieldRepository.InsertAndGetIdAsync(new FormField { TenantId = tenantId, FieldTypeId = fieldTypeInputTextId, CreationTime = DateTime.Now, IsDeleted = false, Description = "Phone Number", Label = "Phone Number", MaxLength = 255, Required = false, ReadOnly = false, RegistrationField = "PhoneNumber", FieldName = "PhoneNumber" });
                    
                    //(default purchase registration fields)
                    var formFieldPurchaseDateId = await _formFieldRepository.InsertAndGetIdAsync(new FormField { TenantId = tenantId, FieldTypeId = fieldTypeDatePickerId, CreationTime = DateTime.Now, IsDeleted = false, Description = "Purchase Date", Label = "Purchase Date", MaxLength = 255, Required = true, ReadOnly = false, PurchaseRegistrationField = "PurchaseDate", FieldName = "PurchaseDate" });
                    var formFieldInvoiceImagePathId = await _formFieldRepository.InsertAndGetIdAsync(new FormField { TenantId = tenantId, FieldTypeId = fieldTypeFileUploaderId, CreationTime = DateTime.Now, IsDeleted = false, Description = "Invoice Image Path", Label = "Invoice Image Path", MaxLength = 1000000000, Required = true, ReadOnly = false, PurchaseRegistrationField = "InvoiceImagePath", FieldName = "InvoiceImagePath" });
                    var formFieldQuantityId = await _formFieldRepository.InsertAndGetIdAsync(new FormField { TenantId = tenantId, FieldTypeId = fieldTypeInputNumberId, CreationTime = DateTime.Now, IsDeleted = false, Description = "Quantity", Label = "Quantity", MaxLength = 1000000000, Required = true, ReadOnly = false, PurchaseRegistrationField = "Quantity", FieldName = "Quantity" });
                    var formFieldTotalAmountId = await _formFieldRepository.InsertAndGetIdAsync(new FormField { TenantId = tenantId, FieldTypeId = fieldTypeInputNumberId, CreationTime = DateTime.Now, IsDeleted = false, Description = "TotalAmount", Label = "TotalAmount", MaxLength = 1000000000, Required = true, ReadOnly = false, PurchaseRegistrationField = "TotalAmount", FieldName = "TotalAmount" });

                    //(built-in selectors)
                    var formFieldCountryId = await _formFieldRepository.InsertAndGetIdAsync(new FormField { TenantId = tenantId, FieldTypeId = fieldTypeDropdownId, CreationTime = DateTime.Now, IsDeleted = false, Description = "Country", Label = "Country", MaxLength = 255, Required = true, ReadOnly = false, FieldName = "Country" });
                    var formFieldProductId = await _formFieldRepository.InsertAndGetIdAsync(new FormField { TenantId = tenantId, FieldTypeId = fieldTypeProductId, CreationTime = DateTime.Now, IsDeleted = false, Description = "Product Purchased", Label = "Product Purchased", MaxLength = 255, Required = true, ReadOnly = false, FieldName = "Product" });
                    var formFieldProductPremiumId = await _formFieldRepository.InsertAndGetIdAsync(new FormField { TenantId = tenantId, FieldTypeId = fieldTypeDropdownId, CreationTime = DateTime.Now, IsDeleted = false, Description = "Product Purchased", Label = "Product Purchased", MaxLength = 255, Required = true, ReadOnly = false, FieldName = "ProductPremium" });
                    var formFieldProductPremiumLiteId = await _formFieldRepository.InsertAndGetIdAsync(new FormField { TenantId = tenantId, FieldTypeId = fieldTypeProductPremiumLiteId, CreationTime = DateTime.Now, IsDeleted = false, Description = "Product Purchased", Label = "Product Purchased", MaxLength = 255, Required = true, ReadOnly = false, FieldName = "ProductPremiumLite" });
                    var formFieldProductPremiumQuantityId = await _formFieldRepository.InsertAndGetIdAsync(new FormField { TenantId = tenantId, FieldTypeId = fieldTypeProductPremiumQuantityId, CreationTime = DateTime.Now, IsDeleted = false, Description = "Product Purchased", Label = "Product Purchased", MaxLength = 255, Required = true, ReadOnly = false, FieldName = "ProductPremiumQuantity" });
                    var formFieldPurchaseRegistrationId = await _formFieldRepository.InsertAndGetIdAsync(new FormField { TenantId = tenantId, FieldTypeId = fieldTypePurchaseRegistrationId, CreationTime = DateTime.Now, IsDeleted = false, Description = "Product Purchased", Label = "Product Purchased", MaxLength = 255, Required = true, ReadOnly = false, FieldName = "PurchaseRegistration" });
                    var formFieldPurchaseRegistrationLiteId = await _formFieldRepository.InsertAndGetIdAsync(new FormField { TenantId = tenantId, FieldTypeId = fieldTypePurchaseRegistrationLiteId, CreationTime = DateTime.Now, IsDeleted = false, Description = "Product Purchased", Label = "Product Purchased", MaxLength = 255, Required = true, ReadOnly = false, FieldName = "PurchaseRegistrationLite" });
                    var formFieldPurchaseRegistrationSerialId = await _formFieldRepository.InsertAndGetIdAsync(new FormField { TenantId = tenantId, FieldTypeId = fieldTypePurchaseRegistrationSerialId, CreationTime = DateTime.Now, IsDeleted = false, Description = "Product Purchased", Label = "Product Purchased", MaxLength = 255, Required = true, ReadOnly = false, FieldName = "PurchaseRegistrationSerial" });
                    var formFieldStorePurchasedId = await _formFieldRepository.InsertAndGetIdAsync(new FormField { TenantId = tenantId, FieldTypeId = fieldTypeRetailerLocationId, CreationTime = DateTime.Now, IsDeleted = false, Description = "Store Purchased", Label = "Store Purchased", MaxLength = 255, Required = true, ReadOnly = false, FieldName = "StorePurchased" });
                    var formFieldStorePickerId = await _formFieldRepository.InsertAndGetIdAsync(new FormField { TenantId = tenantId, FieldTypeId = fieldTypeRetailerRadioButtonId, CreationTime = DateTime.Now, IsDeleted = false, Description = "Store Picker", Label = "Store Picker", MaxLength = 255, Required = true, ReadOnly = false, FieldName = "StorePicker" }); //this is the variant that appears as a radio-button instead of a dropdown-list @ the frontend
                    var formFieldIbanCheckerId = await _formFieldRepository.InsertAndGetIdAsync(new FormField { TenantId = tenantId, FieldTypeId = fieldTypeIbanCheckerId, CreationTime = DateTime.Now, IsDeleted = false, Description = "Iban and Bic", Label = "Iban & Bic", MaxLength = 255, Required = true, ReadOnly = false, FieldName = "IbanChecker" });

                    //(custom registration fields)
                    var formFieldLegalFormId = await _formFieldRepository.InsertAndGetIdAsync(new FormField { TenantId = tenantId, FieldTypeId = fieldTypeInputTextId, CreationTime = DateTime.Now, IsDeleted = false, Description = "Legal Form", Label = "Legal Form", MaxLength = 255, Required = false, ReadOnly = false, FieldName = "LegalForm" });
                    var formFieldBusinessNumberId = await _formFieldRepository.InsertAndGetIdAsync(new FormField { TenantId = tenantId, FieldTypeId = fieldTypeInputNumberId, CreationTime = DateTime.Now, IsDeleted = false, Description = "Business Number", Label = "Business Number", MaxLength = 255, Required = false, ReadOnly = false, FieldName = "BusinessNumber" });
                    var formFieldVatNumberId = await _formFieldRepository.InsertAndGetIdAsync(new FormField { TenantId = tenantId, FieldTypeId = fieldTypeInputTextId, CreationTime = DateTime.Now, IsDeleted = false, Description = "VAT Number", Label = "VAT Number", MaxLength = 255, Required = false, ReadOnly = false, FieldName = "VatNumber" });
                    var formFieldRemarksId = await _formFieldRepository.InsertAndGetIdAsync(new FormField { TenantId = tenantId, FieldTypeId = fieldTypeInputTextId, CreationTime = DateTime.Now, IsDeleted = false, Description = "Remarks", Label = "Remarks", MaxLength = 1000000000, Required = false, ReadOnly = false, FieldName = "Remarks" });
                    var formFieldPolicyId = await _formFieldRepository.InsertAndGetIdAsync(new FormField { TenantId = tenantId, FieldTypeId = fieldTypeCheckBoxId, CreationTime = DateTime.Now, IsDeleted = false, Description = "Policy", Label = "Policy", MaxLength = 1000000000, Required = true, ReadOnly = false, FieldName = "Policy" });
                    var formFieldPrivacyId = await _formFieldRepository.InsertAndGetIdAsync(new FormField { TenantId = tenantId, FieldTypeId = fieldTypeCheckBoxId, CreationTime = DateTime.Now, IsDeleted = false, Description = "Privacy", Label = "Privacy", MaxLength = 1000000000, Required = true, ReadOnly = false, FieldName = "Privacy" });
                    var formFieldNewsletterId = await _formFieldRepository.InsertAndGetIdAsync(new FormField { TenantId = tenantId, FieldTypeId = fieldTypeCheckBoxId, CreationTime = DateTime.Now, IsDeleted = false, Description = "Newsletter", Label = "Newsletter", MaxLength = 255, Required = false, ReadOnly = false, FieldName = "Newsletter" });
                    var formFieldUniqueCodeId = await _formFieldRepository.InsertAndGetIdAsync(new FormField { TenantId = tenantId, FieldTypeId = fieldTypeUniqueCode, CreationTime = DateTime.Now, IsDeleted = false, Description = "UniqueCode", Label = "Unique Code", MaxLength = 255, Required = false, ReadOnly = false, FieldName = "UniqueCode" });
                    var formFieldUniqueCodeByCampaignId = await _formFieldRepository.InsertAndGetIdAsync(new FormField { TenantId = tenantId, FieldTypeId = fieldTypeUniqueCodeByCampaign, CreationTime = DateTime.Now, IsDeleted = false, Description = "UniqueCode by Campaign", Label = "Unique Code", MaxLength = 255, Required = false, ReadOnly = false, FieldName = "UniqueCodeByCampaign" });

                    //(custom purchase registration fields)
                    var formFieldSerialNumberId = await _formFieldRepository.InsertAndGetIdAsync(new FormField { TenantId = tenantId, FieldTypeId = fieldTypeInputTextId, CreationTime = DateTime.Now, IsDeleted = false, Description = "Serial Number", Label = "Serial Number", MaxLength = 255, Required = true, ReadOnly = false, FieldName = "SerialNumber" });
                    var formFieldSerialCodeImageId = await _formFieldRepository.InsertAndGetIdAsync(new FormField { TenantId = tenantId, FieldTypeId = fieldTypeFileUploaderId, CreationTime = DateTime.Now, IsDeleted = false, Description = "Serial Code Image", Label = "Serial Code Image", MaxLength = 1000000000, Required = true, ReadOnly = false, FieldName = "SerialCodeImage" });
                    var formFieldStoreNotAvailable = await _formFieldRepository.InsertAndGetIdAsync(new FormField { TenantId = tenantId, FieldTypeId = fieldTypeInputTextId, CreationTime = DateTime.Now, IsDeleted = false, Description = "Store Not Available", Label = "Store not available", MaxLength = 255, Required = true, ReadOnly = false, FieldName = "StoreNotAvalible" });

                    //(miscellaneous)
                    var formFieldActionCodeId = await _formFieldRepository.InsertAndGetIdAsync(new FormField { TenantId = tenantId, FieldTypeId = fieldTypeInputTextId, CreationTime = DateTime.Now, IsDeleted = false, Description = "ActionCode", Label = "Action Code", MaxLength = 255, Required = false, ReadOnly = false, FieldName = "ActionCode" });
                    var formFieldPageSeparatorId = await _formFieldRepository.InsertAndGetIdAsync(new FormField { TenantId = tenantId, FieldTypeId = fieldTypePageSeparatorId, CreationTime = DateTime.Now, IsDeleted = false, Description = "Page Separator", Label = "Page Separator", MaxLength = 0, Required = false, ReadOnly = false, FieldName = "PageSeparator" });

                    //custom registration fields
                    var registrationFieldLegalFormId = await _registrationFieldRepository.InsertAndGetIdAsync(new RegistrationField { TenantId = tenantId, FormFieldId = formFieldLegalFormId, Description = "LegalForm" });
                    var registrationFieldBusinessNumberId = await _registrationFieldRepository.InsertAndGetIdAsync(new RegistrationField { TenantId = tenantId, FormFieldId = formFieldBusinessNumberId, Description = "BusinessNumber" });
                    var registrationFieldVatNumberId = await _registrationFieldRepository.InsertAndGetIdAsync(new RegistrationField { TenantId = tenantId, FormFieldId = formFieldVatNumberId, Description = "VatNumber" });
                    var registrationFieldRemarksId = await _registrationFieldRepository.InsertAndGetIdAsync(new RegistrationField { TenantId = tenantId, FormFieldId = formFieldRemarksId, Description = "Remarks" });
                    var registrationFieldPolicyId = await _registrationFieldRepository.InsertAndGetIdAsync(new RegistrationField { TenantId = tenantId, FormFieldId = formFieldPolicyId, Description = "Policy" });
                    var registrationFieldPrivacyId = await _registrationFieldRepository.InsertAndGetIdAsync(new RegistrationField { TenantId = tenantId, FormFieldId = formFieldPrivacyId, Description = "Privacy" });
                    var registrationFieldNewsletterId = await _registrationFieldRepository.InsertAndGetIdAsync(new RegistrationField { TenantId = tenantId, FormFieldId = formFieldNewsletterId, Description = "Newsletter" });
                    var registrationFieldUniqueCodeId = await _registrationFieldRepository.InsertAndGetIdAsync(new RegistrationField { TenantId = tenantId, FormFieldId = formFieldUniqueCodeId, Description = "UniqueCode" });
                    var registrationFieldUniqueCodeByCampaignId = await _registrationFieldRepository.InsertAndGetIdAsync(new RegistrationField { TenantId = tenantId, FormFieldId = formFieldUniqueCodeByCampaignId, Description = "UniqueCodeByCampaign" });

                    //custom purchase registration fields
                    var purchaseRegistrationFieldSerialNumberId = await _purchaseRegistrationFieldRepository.InsertAndGetIdAsync(new PurchaseRegistrationField { TenantId = tenantId, FormFieldId = formFieldSerialNumberId, Description = "SerialNumber" });
                    var purchaseRegistrationFieldSerialCodeImageId = await _purchaseRegistrationFieldRepository.InsertAndGetIdAsync(new PurchaseRegistrationField { TenantId = tenantId, FormFieldId = formFieldSerialCodeImageId, Description = "SerialCodeImage" });
                    var purchaseRegistrationFieldStoreNotAvailable = await _purchaseRegistrationFieldRepository.InsertAndGetIdAsync(new PurchaseRegistrationField { TenantId = tenantId, FormFieldId = formFieldStoreNotAvailable, Description = "StoreNotAvalible" });

                    //formfield translations (nl_nl)
                    var formFieldTranslationGenderNlNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldGenderId, LocaleId = localeNlNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Geslacht" });
                    var formFieldTranslationFirstNameNlNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldFirstNameId, LocaleId = localeNlNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Voornaam" });
                    var formFieldTranslationLastNameNlNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldLastNameId, LocaleId = localeNlNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Achternaam" });
                    var formFieldTranslationCompanyNameNlNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldCompanyNameId, LocaleId = localeNlNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Bedrijfsnaam" });
                    var formFieldTranslationStreetNameNlNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldStreetNameId, LocaleId = localeNlNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Straat" });
                    var formFieldTranslationHouseNumberNlNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldHouseNumberId, LocaleId = localeNlNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Huisnummer" });
                    var formFieldTranslationPostalCodeNlNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldPostalCodeId, LocaleId = localeNlNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Postcode" });
                    var formFieldTranslationResidenceNlNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldResidenceId, LocaleId = localeNlNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Woonplaats" });
                    var formFieldTranslationEmailAddressNlNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldEmailAddressId, LocaleId = localeNlNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Emailadres" });
                    var formFieldTranslationPhoneNumberNlNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldPhoneNumberId, LocaleId = localeNlNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Telefoonnummer" });

                    var formFieldTranslationPurchaseDateNlNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldPurchaseDateId, LocaleId = localeNlNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Aankoopdatum" });
                    var formFieldTranslationInvoiceImagePathNlNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldInvoiceImagePathId, LocaleId = localeNlNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Aankoopnota" });
                    var formFieldTranslationQuantityNlNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldQuantityId, LocaleId = localeNlNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Aantal" });
                    var formFieldTranslationTotalAmountNlNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldTotalAmountId, LocaleId = localeNlNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Aankoopbedrag" });

                    var formFieldTranslationCountryNlNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldCountryId, LocaleId = localeNlNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Land" });
                    var formFieldTranslationProductNlNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldProductId, LocaleId = localeNlNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Product" });
                    var formFieldTranslationProductPremiumNlNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldProductPremiumId, LocaleId = localeNlNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Product" });
                    var formFieldTranslationProductPremiumLiteNlNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldProductPremiumLiteId, LocaleId = localeNlNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Product" });
                    var formFieldTranslationProductPremiumQuantityNlNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldProductPremiumQuantityId, LocaleId = localeNlNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Product" });
                    var formFieldTranslationStorePurchasedNlNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldStorePurchasedId, LocaleId = localeNlNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Winkel" });
                    var formFieldTranslationStorePickerNlNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldStorePickerId, LocaleId = localeNlNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Winkel" });
                    var formFieldTranslationIbanCheckerNlNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldIbanCheckerId, LocaleId = localeNlNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "IBAN rekeningnummer" });

                    var formFieldTranslationLegalFormNlNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldLegalFormId, LocaleId = localeNlNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Bedrijfsvorm (BV, VOF, ZZP)" });
                    var formFieldTranslationBusinessNumberNlNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldBusinessNumberId, LocaleId = localeNlNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "KVK nummer" });
                    var formFieldTranslationVatNumberNlNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldVatNumberId, LocaleId = localeNlNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "BTW nummer" });
                    var formFieldTranslationRemarksNlNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldRemarksId, LocaleId = localeNlNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Opmerkingen" });
                    var formFieldTranslationPolicyNlNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldPolicyId, LocaleId = localeNlNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Voorwaarden" });
                    var formFieldTranslationPrivacyNlNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldPrivacyId, LocaleId = localeNlNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Privacy" });
                    var formFieldTranslationNewsletterNlNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldNewsletterId, LocaleId = localeNlNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Nieuwsbrief" });
                    var formFieldTranslationUniqueCodeNlNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldUniqueCodeId, LocaleId = localeNlNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Unieke code" });
                    var formFieldTranslationUniqueCodeByCampaignNlNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldUniqueCodeByCampaignId, LocaleId = localeNlNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Unieke code" });

                    var formFieldTranslationSerialNumberNlNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldSerialNumberId, LocaleId = localeNlNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Serienummer" });
                    var formFieldTranslationSerialCodeImageNlNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldSerialCodeImageId, LocaleId = localeNlNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Foto serienummer" });
                    var formFieldTranslationStoreNotAvailableNlNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldStoreNotAvailable, LocaleId = localeNlNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Een andere winkel, namelijk" });

                    var formFieldTranslationActionCodeNlNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldActionCodeId, LocaleId = localeNlNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Actiecode" });
                    var formFieldTranslationPageSeparatorNlNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldPageSeparatorId, LocaleId = localeNlNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Pagina onderbreker" });

                    //formfield translations (be_nl)
                    var formFieldTranslationGenderBeNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldGenderId, LocaleId = localeBeNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Geslacht" });
                    var formFieldTranslationFirstNameBeNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldFirstNameId, LocaleId = localeBeNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Voornaam" });
                    var formFieldTranslationLastNameBeNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldLastNameId, LocaleId = localeBeNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Achternaam" });
                    var formFieldTranslationCompanyNameBeNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldCompanyNameId, LocaleId = localeBeNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Bedrijfsnaam" });
                    var formFieldTranslationStreetNameBeNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldStreetNameId, LocaleId = localeBeNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Straat" });
                    var formFieldTranslationHouseNumberBeNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldHouseNumberId, LocaleId = localeBeNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Huisnummer" });
                    var formFieldTranslationPostalCodeBeNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldPostalCodeId, LocaleId = localeBeNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Postcode" });
                    var formFieldTranslationResidenceBeNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldResidenceId, LocaleId = localeBeNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Woonplaats" });
                    var formFieldTranslationEmailAddressBeNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldEmailAddressId, LocaleId = localeBeNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Emailadres" });
                    var formFieldTranslationPhoneNumberBeNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldPhoneNumberId, LocaleId = localeBeNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Telefoonnummer" });

                    var formFieldTranslationPurchaseDateBeNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldPurchaseDateId, LocaleId = localeBeNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Aankoopdatum" });
                    var formFieldTranslationInvoiceImagePathBeNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldInvoiceImagePathId, LocaleId = localeBeNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Aankoopnota" });
                    var formFieldTranslationQuantityBeNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldQuantityId, LocaleId = localeBeNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Aantal" });
                    var formFieldTranslationTotalAmountBeNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldTotalAmountId, LocaleId = localeBeNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Aankoopbedrag" });

                    var formFieldTranslationCountryBeNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldCountryId, LocaleId = localeBeNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Land" });
                    var formFieldTranslationProductBeNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldProductId, LocaleId = localeBeNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Product" });
                    var formFieldTranslationProductPremiumBeNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldProductPremiumId, LocaleId = localeBeNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Product" });
                    var formFieldTranslationProductPremiumLiteBeNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldProductPremiumLiteId, LocaleId = localeBeNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Product" });
                    var formFieldTranslationProductPremiumQuantityBeNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldProductPremiumQuantityId, LocaleId = localeBeNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Product" });
                    var formFieldTranslationStorePurchasedBeNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldStorePurchasedId, LocaleId = localeBeNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Winkel" });
                    var formFieldTranslationStorePickerBeNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldStorePickerId, LocaleId = localeBeNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Winkel" });
                    var formFieldTranslationIbanCheckerBeNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldIbanCheckerId, LocaleId = localeBeNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "IBAN rekeningnummer" });

                    var formFieldTranslationLegalFormBeNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldLegalFormId, LocaleId = localeBeNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Bedrijfsvorm (BV, VOF, ZZP)" });
                    var formFieldTranslationBusinessNumberBeNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldBusinessNumberId, LocaleId = localeBeNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "KVK nummer" });
                    var formFieldTranslationVatNumberBeNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldVatNumberId, LocaleId = localeBeNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "BTW nummer" });
                    var formFieldTranslationRemarksBeNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldRemarksId, LocaleId = localeBeNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Opmerkingen" });
                    var formFieldTranslationPolicyBeNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldPolicyId, LocaleId = localeBeNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Voorwaarden" });
                    var formFieldTranslationPrivacyBeNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldPrivacyId, LocaleId = localeBeNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Privacy" });
                    var formFieldTranslationNewsletterBeNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldNewsletterId, LocaleId = localeBeNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Nieuwsbrief" });
                    var formFieldTranslationUniqueCodeBeNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldUniqueCodeId, LocaleId = localeBeNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Unieke code" });
                    var formFieldTranslationUniqueCodeByCampaignBeNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldUniqueCodeByCampaignId, LocaleId = localeBeNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Unieke code" });

                    var formFieldTranslationSerialNumberBeNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldSerialNumberId, LocaleId = localeBeNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Serienummer" });
                    var formFieldTranslationSerialCodeImageBeNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldSerialCodeImageId, LocaleId = localeBeNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Foto serienummer" });
                    var formFieldTranslationStoreNotAvailableBeNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldStoreNotAvailable, LocaleId = localeBeNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Een andere winkel, namelijk" });

                    var formFieldTranslationActionCodeBeNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldActionCodeId, LocaleId = localeBeNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Actiecode" });
                    var formFieldTranslationPageSeparatorBeNlId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldPageSeparatorId, LocaleId = localeBeNlId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Pagina onderbreker" });

                    //formfield translations (be_fr)
                    var formFieldTranslationGenderBeFrId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldGenderId, LocaleId = localeBeFrId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Sexe" });
                    var formFieldTranslationFirstNameBeFrId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldFirstNameId, LocaleId = localeBeFrId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Prénom" });
                    var formFieldTranslationLastNameBeFrId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldLastNameId, LocaleId = localeBeFrId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Nom" });
                    var formFieldTranslationCompanyNameBeFrId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldCompanyNameId, LocaleId = localeBeFrId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Compagnie" });
                    var formFieldTranslationStreetNameBeFrId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldStreetNameId, LocaleId = localeBeFrId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Adresse" });
                    var formFieldTranslationHouseNumberBeFrId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldHouseNumberId, LocaleId = localeBeFrId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Numéro" });
                    var formFieldTranslationPostalCodeBeFrId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldPostalCodeId, LocaleId = localeBeFrId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Code postal" });
                    var formFieldTranslationResidenceBeFrId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldResidenceId, LocaleId = localeBeFrId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Résidence" });
                    var formFieldTranslationEmailAddressBeFrId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldEmailAddressId, LocaleId = localeBeFrId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Email" });
                    var formFieldTranslationPhoneNumberBeFrId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldPhoneNumberId, LocaleId = localeBeFrId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Téléphone" });

                    var formFieldTranslationPurchaseDateBeFrId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldPurchaseDateId, LocaleId = localeBeFrId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Date d'achat" });
                    var formFieldTranslationInvoiceImagePathBeFrId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldInvoiceImagePathId, LocaleId = localeBeFrId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Facture d'achat" });
                    var formFieldTranslationQuantityBeFrId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldQuantityId, LocaleId = localeBeFrId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Quantité" });
                    var formFieldTranslationTotalAmountBeFrId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldTotalAmountId, LocaleId = localeBeFrId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Montant des achats" });

                    var formFieldTranslationCountryBeFrId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldCountryId, LocaleId = localeBeFrId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Pays" });
                    var formFieldTranslationProductBeFrId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldProductId, LocaleId = localeBeFrId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Produit" });
                    var formFieldTranslationProductPremiumBeFrId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldProductPremiumId, LocaleId = localeBeFrId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Produit" });
                    var formFieldTranslationProductPremiumLiteBeFrId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldProductPremiumLiteId, LocaleId = localeBeFrId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Produit" });
                    var formFieldTranslationProductPremiumQuantityBeFrId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldProductPremiumQuantityId, LocaleId = localeBeFrId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Produit" });
                    var formFieldTranslationStorePurchasedBeFrId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldStorePurchasedId, LocaleId = localeBeFrId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Magasin" });
                    var formFieldTranslationStorePickerBeFrId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldStorePickerId, LocaleId = localeBeFrId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Magasin" });
                    var formFieldTranslationIbanCheckerBeFrId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldIbanCheckerId, LocaleId = localeBeFrId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "IBAN numéro de compte" });

                    var formFieldTranslationLegalFormBeFrId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldLegalFormId, LocaleId = localeBeFrId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Forme de société (BV, VOF, ZZP)" });
                    var formFieldTranslationBusinessNumberBeFrId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldBusinessNumberId, LocaleId = localeBeFrId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Numéro de CCI" });
                    var formFieldTranslationVatNumberBeFrId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldVatNumberId, LocaleId = localeBeFrId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Numéro de TVA" });
                    var formFieldTranslationRemarksBeFrId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldRemarksId, LocaleId = localeBeFrId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Remarques" });
                    var formFieldTranslationPolicyBeFrId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldPolicyId, LocaleId = localeBeFrId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Conditions" });
                    var formFieldTranslationPrivacyBeFrId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldPrivacyId, LocaleId = localeBeFrId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Privacy" });
                    var formFieldTranslationNewsletterBeFrId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldNewsletterId, LocaleId = localeBeFrId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Bulletin" });
                    var formFieldTranslationUniqueCodeBeFrId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldUniqueCodeId, LocaleId = localeBeFrId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Code unique" });
                    var formFieldTranslationUniqueCodeByCampaignBeFrId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldUniqueCodeByCampaignId, LocaleId = localeBeFrId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Code unique" });

                    var formFieldTranslationSerialNumberBeFrId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldSerialNumberId, LocaleId = localeBeFrId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Numéro de série" });
                    var formFieldTranslationSerialCodeImageBeFrId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldSerialCodeImageId, LocaleId = localeBeFrId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Photo numéro de série" });
                    var formFieldTranslationStoreNotAvailableBeFrId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldStoreNotAvailable, LocaleId = localeBeFrId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Un autre magasin, plus specifique" });

                    var formFieldTranslationActionCodeBeFrId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldActionCodeId, LocaleId = localeBeFrId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Code d'action" });
                    var formFieldTranslationPageSeparatorBeFrId = await _formFieldTranslationRepository.InsertAndGetIdAsync(new FormFieldTranslation { TenantId = tenantId, FormFieldId = formFieldPageSeparatorId, LocaleId = localeBeFrId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, Label = "Interrupteur de page" });

                    //company form setup
                    var addressId = await _addressRepository.InsertAndGetIdAsync(new Address { TenantId = tenantId, CountryId = countryNlId, CreationTime = DateTime.Now, IsDeleted = false, AddressLine1 = "Your Street", PostalCode = "0000 PC", City = "Your City" });
                    var companyId = await _companyRepository.InsertAndGetIdAsync(new Company.Company { TenantId = tenantId, AddressId = addressId, CreationTime = DateTime.Now, IsDeleted = false, Name = "Test Company", EmailAddress = "youremailaddress@domain.com", PhoneNumber = "+31209999999", BicCashBack = "BBBBLLPPFFF", IbanCashBack = "NL00RABO1122334455" });
                    var formId = await _formRepository.InsertAndGetIdAsync(new Form { TenantId = tenantId, SystemLevelId = systemLevelCompanyId, CreationTime = DateTime.Now, IsDeleted = false, Version = "1.0" });

                    var formLocaleNlNlId = await _formLocaleRepository.InsertAndGetIdAsync(new FormLocale { TenantId = tenantId, FormId = formId, LocaleId = localeNlNlId, CreationTime = DateTime.Now, IsDeleted = false, Description = "nl_nl" });
                    var formLocaleBeNlId = await _formLocaleRepository.InsertAndGetIdAsync(new FormLocale { TenantId = tenantId, FormId = formId, LocaleId = localeBeNlId, CreationTime = DateTime.Now, IsDeleted = false, Description = "be_nl" });
                    var formLocaleBeFrId = await _formLocaleRepository.InsertAndGetIdAsync(new FormLocale { TenantId = tenantId, FormId = formId, LocaleId = localeBeFrId, CreationTime = DateTime.Now, IsDeleted = false, Description = "be_fr" });

                    var formBlockNawNlNlId = await _formBlockRepository.InsertAndGetIdAsync(new FormBlock { TenantId = tenantId, FormLocaleId = formLocaleNlNlId, CreationTime = DateTime.Now, IsDeleted = false, IsPurchaseRegistration = false, Description = "NAW", SortOrder = 1 });
                    var formBlockNawBeNlId = await _formBlockRepository.InsertAndGetIdAsync(new FormBlock { TenantId = tenantId, FormLocaleId = formLocaleBeNlId, CreationTime = DateTime.Now, IsDeleted = false, IsPurchaseRegistration = false, Description = "NAW", SortOrder = 1 });
                    var formBlockNawBeFrId = await _formBlockRepository.InsertAndGetIdAsync(new FormBlock { TenantId = tenantId, FormLocaleId = formLocaleBeFrId, CreationTime = DateTime.Now, IsDeleted = false, IsPurchaseRegistration = false, Description = "NAW", SortOrder = 1 });

                    var formBlockProductNlNlId = await _formBlockRepository.InsertAndGetIdAsync(new FormBlock { TenantId = tenantId, FormLocaleId = formLocaleNlNlId, CreationTime = DateTime.Now, IsDeleted = false, IsPurchaseRegistration = true, Description = "Product", SortOrder = 2 });
                    var formBlockProductBeNlId = await _formBlockRepository.InsertAndGetIdAsync(new FormBlock { TenantId = tenantId, FormLocaleId = formLocaleBeNlId, CreationTime = DateTime.Now, IsDeleted = false, IsPurchaseRegistration = true, Description = "Product", SortOrder = 2 });
                    var formBlockProductBeFrId = await _formBlockRepository.InsertAndGetIdAsync(new FormBlock { TenantId = tenantId, FormLocaleId = formLocaleBeFrId, CreationTime = DateTime.Now, IsDeleted = false, IsPurchaseRegistration = true, Description = "Product", SortOrder = 2 });

                    var formBlockTermsNlNlId = await _formBlockRepository.InsertAndGetIdAsync(new FormBlock { TenantId = tenantId, FormLocaleId = formLocaleNlNlId, CreationTime = DateTime.Now, IsDeleted = false, IsPurchaseRegistration = false, Description = "Terms and Conditions", SortOrder = 3 });
                    var formBlockTermsBeNlId = await _formBlockRepository.InsertAndGetIdAsync(new FormBlock { TenantId = tenantId, FormLocaleId = formLocaleBeNlId, CreationTime = DateTime.Now, IsDeleted = false, IsPurchaseRegistration = false, Description = "Terms and Conditions", SortOrder = 3 });
                    var formBlockTermsBeFrId = await _formBlockRepository.InsertAndGetIdAsync(new FormBlock { TenantId = tenantId, FormLocaleId = formLocaleBeFrId, CreationTime = DateTime.Now, IsDeleted = false, IsPurchaseRegistration = false, Description = "Terms and Conditions", SortOrder = 3 });

                    //formblockfields (nl_nl)
                    var formBlockFieldGenderNlNlId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldGenderId, FormBlockId = formBlockNawNlNlId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 1 });
                    var formBlockFieldFirstNameNlNlId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldFirstNameId, FormBlockId = formBlockNawNlNlId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 2 });
                    var formBlockFieldLastNameNlNlId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldLastNameId, FormBlockId = formBlockNawNlNlId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 3 });
                    var formBlockFieldPostalCodeNlNlId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldPostalCodeId, FormBlockId = formBlockNawNlNlId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 4 });
                    var formBlockFieldHouseNumberNlNlId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldHouseNumberId, FormBlockId = formBlockNawNlNlId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 5 });
                    var formBlockFieldStreetNameNlNlId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldStreetNameId, FormBlockId = formBlockNawNlNlId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 6 });                   
                    var formBlockFieldResidenceNlNlId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldResidenceId, FormBlockId = formBlockNawNlNlId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 7 });
                    var formBlockFieldEmailAddressNlNlId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldEmailAddressId, FormBlockId = formBlockNawNlNlId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 8 });
                    var formBlockFieldPhoneNumberNlNlId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldPhoneNumberId, FormBlockId = formBlockNawNlNlId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 9 });
                    var formBlockFieldPageSeparatorNlNlId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldPageSeparatorId, FormBlockId = formBlockNawNlNlId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 10 });

                    var formBlockFieldProductNlNlId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldProductId, FormBlockId = formBlockProductNlNlId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 1 });
                    var formBlockFieldQuantityNlNlId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldQuantityId, FormBlockId = formBlockProductNlNlId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 2 });
                    //var formBlockFieldStorePurchasedNlNlId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldStorePurchasedId, FormBlockId = formBlockProductNlNlId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 3 });
                    var formBlockFieldPurchaseDateNlNlId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldPurchaseDateId, FormBlockId = formBlockProductNlNlId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 4 });
                    var formBlockFieldInvoiceImagePathNlNlId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldInvoiceImagePathId, FormBlockId = formBlockProductNlNlId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 5 });

                    var formBlockFieldPrivacyNlNlId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldPrivacyId, FormBlockId = formBlockTermsNlNlId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 1 });
                    //var formBlockFieldPolicyNlNlId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldPolicyId, FormBlockId = formBlockTermsNlNlId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 2 });

                    //formblockfields (be_nl)
                    var formBlockFieldGenderBeNlId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldGenderId, FormBlockId = formBlockNawBeNlId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 1 });
                    var formBlockFieldFirstNameBeNlId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldFirstNameId, FormBlockId = formBlockNawBeNlId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 2 });
                    var formBlockFieldLastNameBeNlId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldLastNameId, FormBlockId = formBlockNawBeNlId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 3 });
                    var formBlockFieldStreetNameBeNlId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldStreetNameId, FormBlockId = formBlockNawBeNlId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 4 });
                    var formBlockFieldHouseNumberBeNlId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldHouseNumberId, FormBlockId = formBlockNawBeNlId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 5 });
                    var formBlockFieldPostalCodeBeNlId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldPostalCodeId, FormBlockId = formBlockNawBeNlId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 6 });
                    var formBlockFieldResidenceBeNlId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldResidenceId, FormBlockId = formBlockNawBeNlId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 7 });
                    var formBlockFieldEmailAddressBeNlId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldEmailAddressId, FormBlockId = formBlockNawBeNlId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 8 });
                    var formBlockFieldPhoneNumberBeNlId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldPhoneNumberId, FormBlockId = formBlockNawBeNlId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 9 });
                    var formBlockFieldPageSeparatorBeNlId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldPageSeparatorId, FormBlockId = formBlockNawBeNlId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 10 });

                    var formBlockFieldProductBeNlId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldProductId, FormBlockId = formBlockProductBeNlId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 1 });
                    var formBlockFieldQuantityBeNlId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldQuantityId, FormBlockId = formBlockProductBeNlId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 2 });
                    //var formBlockFieldStorePurchasedBeNlId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldStorePurchasedId, FormBlockId = formBlockProductBeNlId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 3 });
                    var formBlockFieldPurchaseDateBeNlId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldPurchaseDateId, FormBlockId = formBlockProductBeNlId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 4 });
                    var formBlockFieldInvoiceImagePathBeNlId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldInvoiceImagePathId, FormBlockId = formBlockProductBeNlId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 5 });

                    var formBlockFieldPrivacyBeNlId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldPrivacyId, FormBlockId = formBlockTermsBeNlId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 1 });
                    //var formBlockFieldPolicyBeNlId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldPolicyId, FormBlockId = formBlockTermsBeNlId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 2 });

                    //formblockfields (be_fr)
                    var formBlockFieldGenderBeFrId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldGenderId, FormBlockId = formBlockNawBeFrId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 1 });
                    var formBlockFieldFirstNameBeFrId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldFirstNameId, FormBlockId = formBlockNawBeFrId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 2 });
                    var formBlockFieldLastNameBeFrId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldLastNameId, FormBlockId = formBlockNawBeFrId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 3 });
                    var formBlockFieldStreetNameBeFrId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldStreetNameId, FormBlockId = formBlockNawBeFrId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 4 });
                    var formBlockFieldHouseNumberBeFrId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldHouseNumberId, FormBlockId = formBlockNawBeFrId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 5 });
                    var formBlockFieldPostalCodeBeFrId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldPostalCodeId, FormBlockId = formBlockNawBeFrId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 6 });
                    var formBlockFieldResidenceBeFrId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldResidenceId, FormBlockId = formBlockNawBeFrId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 7 });
                    var formBlockFieldEmailAddressBeFrId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldEmailAddressId, FormBlockId = formBlockNawBeFrId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 8 });
                    var formBlockFieldPhoneNumberBeFrId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldPhoneNumberId, FormBlockId = formBlockNawBeFrId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 9 });
                    var formBlockFieldPageSeparatorBeFrId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldPageSeparatorId, FormBlockId = formBlockNawBeFrId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 10 });

                    var formBlockFieldProductBeFrId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldProductId, FormBlockId = formBlockProductBeFrId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 1 });
                    var formBlockFieldQuantityBeFrId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldQuantityId, FormBlockId = formBlockProductBeFrId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 2 });
                    //var formBlockFieldStorePurchasedBeFrId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldStorePurchasedId, FormBlockId = formBlockProductBeFrId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 3 });
                    var formBlockFieldPurchaseDateBeFrId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldPurchaseDateId, FormBlockId = formBlockProductBeFrId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 4 });
                    var formBlockFieldInvoiceImagePathBeFrId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldInvoiceImagePathId, FormBlockId = formBlockProductBeFrId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 5 });

                    var formBlockFieldPrivacyBeFrId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldPrivacyId, FormBlockId = formBlockTermsBeFrId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 1 });
                    //var formBlockFieldPolicyBeFrId = await _formBlockFieldRepository.InsertAndGetIdAsync(new FormBlockField { TenantId = tenantId, FormFieldId = formFieldPolicyId, FormBlockId = formBlockTermsBeFrId, CreationTime = DateTime.Now, IsDeleted = false, SortOrder = 2 });

                    //value lists & list values
                    var valueListGenderId = await _valueListRepository.InsertAndGetIdAsync(new ValueList { TenantId = tenantId, CreationTime = DateTime.Now, IsDeleted = false, Description = "Gender" });
                    var valueListPolicyId = await _valueListRepository.InsertAndGetIdAsync(new ValueList { TenantId = tenantId, CreationTime = DateTime.Now, IsDeleted = false, Description = "Policy" });
                    var valueListPrivacyId = await _valueListRepository.InsertAndGetIdAsync(new ValueList { TenantId = tenantId, CreationTime = DateTime.Now, IsDeleted = false, Description = "Privacy" });
                    var valueListNewsletterId = await _valueListRepository.InsertAndGetIdAsync(new ValueList { TenantId = tenantId, CreationTime = DateTime.Now, IsDeleted = false, Description = "Newsletter" });

                    var listValueMaleId = await _listValueRepository.InsertAndGetIdAsync(new ListValue { TenantId = tenantId, ValueListId = valueListGenderId, CreationTime = DateTime.Now, IsDeleted = false, KeyValue = "M", Description = "Man", SortOrder = 1 });
                    var listValueFemaleId = await _listValueRepository.InsertAndGetIdAsync(new ListValue { TenantId = tenantId, ValueListId = valueListGenderId, CreationTime = DateTime.Now, IsDeleted = false, KeyValue = "F", Description = "Woman", SortOrder = 2 });
                    var listValueOtherGenderId = await _listValueRepository.InsertAndGetIdAsync(new ListValue { TenantId = tenantId, ValueListId = valueListGenderId, CreationTime = DateTime.Now, IsDeleted = false, KeyValue = "X", Description = "Other", SortOrder = 3 });
                    var listValuePolicyId = await _listValueRepository.InsertAndGetIdAsync(new ListValue { TenantId = tenantId, ValueListId = valueListPolicyId, CreationTime = DateTime.Now, IsDeleted = false, KeyValue = "True", Description = "Policy", SortOrder = 1 });
                    var listValuePrivacyId = await _listValueRepository.InsertAndGetIdAsync(new ListValue { TenantId = tenantId, ValueListId = valueListPrivacyId, CreationTime = DateTime.Now, IsDeleted = false, KeyValue = "True", Description = "Privacy", SortOrder = 1 });
                    var listValueNewsletterId = await _listValueRepository.InsertAndGetIdAsync(new ListValue { TenantId = tenantId, ValueListId = valueListNewsletterId, CreationTime = DateTime.Now, IsDeleted = false, KeyValue = "True", Description = "Newsletter", SortOrder = 1 });

                    //list values (nl_nl)
                    var listValueTranslationMaleNlNlId = await _listValueTranslationRepository.InsertAndGetIdAsync(new ListValueTranslation { TenantId = tenantId, ListValueId = listValueMaleId, LocaleId = localeNlNlId, CreationTime = DateTime.Now, IsDeleted = false, KeyValue = "M", Description = "Man" });
                    var listValueTranslationFemaleNlNlId = await _listValueTranslationRepository.InsertAndGetIdAsync(new ListValueTranslation { TenantId = tenantId, ListValueId = listValueFemaleId, LocaleId = localeNlNlId, CreationTime = DateTime.Now, IsDeleted = false, KeyValue = "F", Description = "Vrouw" });
                    var listValueTranslationOtherGenderNlNlId = await _listValueTranslationRepository.InsertAndGetIdAsync(new ListValueTranslation { TenantId = tenantId, ListValueId = listValueOtherGenderId, LocaleId = localeNlNlId, CreationTime = DateTime.Now, IsDeleted = false, KeyValue = "X", Description = "Anders" });
                    var listValueTranslationPolicyNlNlId = await _listValueTranslationRepository.InsertAndGetIdAsync(new ListValueTranslation { TenantId = tenantId, ListValueId = listValuePolicyId, LocaleId = localeNlNlId, CreationTime = DateTime.Now, IsDeleted = false, KeyValue = "True", Description = "Ik ga akkoord met de actievoorwaarden." });
                    var listValueTranslationPrivacyNlNlId = await _listValueTranslationRepository.InsertAndGetIdAsync(new ListValueTranslation { TenantId = tenantId, ListValueId = listValuePrivacyId, LocaleId = localeNlNlId, CreationTime = DateTime.Now, IsDeleted = false, KeyValue = "True", Description = "Ik geef toestemming voor het verwerken van mijn persoonsgegevens." });
                    var listValueTranslationNewsletterNlNlId = await _listValueTranslationRepository.InsertAndGetIdAsync(new ListValueTranslation { TenantId = tenantId, ListValueId = listValueNewsletterId, LocaleId = localeNlNlId, CreationTime = DateTime.Now, IsDeleted = false, KeyValue = "True", Description = "Ik wens de nieuwsbrief te ontvangen." });

                    //list values (be_nl)
                    var listValueTranslationMaleBeNlId = await _listValueTranslationRepository.InsertAndGetIdAsync(new ListValueTranslation { TenantId = tenantId, ListValueId = listValueMaleId, LocaleId = localeBeNlId, CreationTime = DateTime.Now, IsDeleted = false, KeyValue = "M", Description = "Man" });
                    var listValueTranslationFemaleBeNlId = await _listValueTranslationRepository.InsertAndGetIdAsync(new ListValueTranslation { TenantId = tenantId, ListValueId = listValueFemaleId, LocaleId = localeBeNlId, CreationTime = DateTime.Now, IsDeleted = false, KeyValue = "F", Description = "Vrouw" });
                    var listValueTranslationOtherGenderBeNlId = await _listValueTranslationRepository.InsertAndGetIdAsync(new ListValueTranslation { TenantId = tenantId, ListValueId = listValueOtherGenderId, LocaleId = localeBeNlId, CreationTime = DateTime.Now, IsDeleted = false, KeyValue = "X", Description = "Anders" });
                    var listValueTranslationPolicyBeNlId = await _listValueTranslationRepository.InsertAndGetIdAsync(new ListValueTranslation { TenantId = tenantId, ListValueId = listValuePolicyId, LocaleId = localeBeNlId, CreationTime = DateTime.Now, IsDeleted = false, KeyValue = "True", Description = "Ik ga akkoord met de actievoorwaarden." });
                    var listValueTranslationPrivacyBeNlId = await _listValueTranslationRepository.InsertAndGetIdAsync(new ListValueTranslation { TenantId = tenantId, ListValueId = listValuePrivacyId, LocaleId = localeBeNlId, CreationTime = DateTime.Now, IsDeleted = false, KeyValue = "True", Description = "Ik geef toestemming voor het verwerken van mijn persoonsgegevens." });
                    var listValueTranslationNewsletterBeNlId = await _listValueTranslationRepository.InsertAndGetIdAsync(new ListValueTranslation { TenantId = tenantId, ListValueId = listValueNewsletterId, LocaleId = localeBeNlId, CreationTime = DateTime.Now, IsDeleted = false, KeyValue = "True", Description = "Ik wens de nieuwsbrief te ontvangen." });

                    //list values (be_fr)
                    var listValueTranslationMaleBeFrId = await _listValueTranslationRepository.InsertAndGetIdAsync(new ListValueTranslation { TenantId = tenantId, ListValueId = listValueMaleId, LocaleId = localeBeFrId, CreationTime = DateTime.Now, IsDeleted = false, KeyValue = "M", Description = "Homme" });
                    var listValueTranslationFemaleBeFrId = await _listValueTranslationRepository.InsertAndGetIdAsync(new ListValueTranslation { TenantId = tenantId, ListValueId = listValueFemaleId, LocaleId = localeBeFrId, CreationTime = DateTime.Now, IsDeleted = false, KeyValue = "F", Description = "Femme" });
                    var listValueTranslationOtherGenderBeFrId = await _listValueTranslationRepository.InsertAndGetIdAsync(new ListValueTranslation { TenantId = tenantId, ListValueId = listValueOtherGenderId, LocaleId = localeBeFrId, CreationTime = DateTime.Now, IsDeleted = false, KeyValue = "X", Description = "Autre" });
                    var listValueTranslationPolicyBeFrId = await _listValueTranslationRepository.InsertAndGetIdAsync(new ListValueTranslation { TenantId = tenantId, ListValueId = listValuePolicyId, LocaleId = localeBeFrId, CreationTime = DateTime.Now, IsDeleted = false, KeyValue = "True", Description = "Je suis d'accord avec les conditions de la promotion." });
                    var listValueTranslationPrivacyBeFrId = await _listValueTranslationRepository.InsertAndGetIdAsync(new ListValueTranslation { TenantId = tenantId, ListValueId = listValuePrivacyId, LocaleId = localeBeFrId, CreationTime = DateTime.Now, IsDeleted = false, KeyValue = "True", Description = "J'autorise le traitement de mes données personnelles." });
                    var listValueTranslationNewsletterBeFrId = await _listValueTranslationRepository.InsertAndGetIdAsync(new ListValueTranslation { TenantId = tenantId, ListValueId = listValueNewsletterId, LocaleId = localeBeFrId, CreationTime = DateTime.Now, IsDeleted = false, KeyValue = "True", Description = "Je souhaite recevoir le bulletin." });

                    var formFieldValueListGenderId = await _formFieldValueListRepository.InsertAndGetIdAsync(new FormFieldValueList { TenantId = tenantId, FormFieldId = formFieldGenderId, ValueListId = valueListGenderId, CreationTime = DateTime.Now, IsDeleted = false });
                    var formFieldValueListPolicyId = await _formFieldValueListRepository.InsertAndGetIdAsync(new FormFieldValueList { TenantId = tenantId, FormFieldId = formFieldPolicyId, ValueListId = valueListPolicyId, CreationTime = DateTime.Now, IsDeleted = false });
                    var formFieldValueListPrivacyId = await _formFieldValueListRepository.InsertAndGetIdAsync(new FormFieldValueList { TenantId = tenantId, FormFieldId = formFieldPrivacyId, ValueListId = valueListPrivacyId, CreationTime = DateTime.Now, IsDeleted = false });
                    var formFieldValueListNewsletterId = await _formFieldValueListRepository.InsertAndGetIdAsync(new FormFieldValueList { TenantId = tenantId, FormFieldId = formFieldNewsletterId, ValueListId = valueListNewsletterId, CreationTime = DateTime.Now, IsDeleted = false });

                    //rejection & incomplete reasons
                    var rejectionReasonDoubleRegistrationId = await _rejectionReasonRepository.InsertAndGetIdAsync(new RejectionReason { TenantId = tenantId, Description = "Dubbele registratie", IsIncompleteReason = false });
                    var rejectionReasonTestRegistrationId = await _rejectionReasonRepository.InsertAndGetIdAsync(new RejectionReason { TenantId = tenantId, Description = "Test registratie", IsIncompleteReason = false });
                    var rejectionReasonBroughtBackId = await _rejectionReasonRepository.InsertAndGetIdAsync(new RejectionReason { TenantId = tenantId, Description = "Retour gebracht", IsIncompleteReason = false });
                    var rejectionReasonIncorrectTypeNumberId = await _rejectionReasonRepository.InsertAndGetIdAsync(new RejectionReason { TenantId = tenantId, Description = "Onjuist typenummer", IsIncompleteReason = false });
                    var rejectionReasonNoParticipatingRetailerId = await _rejectionReasonRepository.InsertAndGetIdAsync(new RejectionReason { TenantId = tenantId, Description = "Geen deelnemende winkel", IsIncompleteReason = false });
                    var rejectionReasonProductPurchasedOutsideOfTimeTableId = await _rejectionReasonRepository.InsertAndGetIdAsync(new RejectionReason { TenantId = tenantId, Description = "Product is gekocht buiten de actieperiode", IsIncompleteReason = false });
                    var rejectionReasonCombiSetsNotEligibleId = await _rejectionReasonRepository.InsertAndGetIdAsync(new RejectionReason { TenantId = tenantId, Description = "Combi-sets zijn uitgesloten van deelname", IsIncompleteReason = false });
                    var rejectionReasonIncorrectCampaignId = await _rejectionReasonRepository.InsertAndGetIdAsync(new RejectionReason { TenantId = tenantId, Description = "Verkeerde actie", IsIncompleteReason = false });
                    var rejectionReasonExcludedDealersId = await _rejectionReasonRepository.InsertAndGetIdAsync(new RejectionReason { TenantId = tenantId, Description = "Dealers zijn uitgesloten van de actie", IsIncompleteReason = false });

                    var incompleteReasonNonReadableId = await _rejectionReasonRepository.InsertAndGetIdAsync(new RejectionReason { TenantId = tenantId, Description = "Niet-leesbaar document bijgevoegd of het bestand kan niet geopend worden", IsIncompleteReason = true });
                    var incompleteReasonWrongInvoiceId = await _rejectionReasonRepository.InsertAndGetIdAsync(new RejectionReason { TenantId = tenantId, Description = "Foutieve factuur of ander document bijgevoegd", IsIncompleteReason = true });
                    var incompleteReasonWrongNAWId = await _rejectionReasonRepository.InsertAndGetIdAsync(new RejectionReason { TenantId = tenantId, Description = "NAW-gegevens van de aanvrager komen niet overeen met de gegevens die op de aankoopnota staan", IsIncompleteReason = true });
                    var incompleteReasonWrongDocumentId = await _rejectionReasonRepository.InsertAndGetIdAsync(new RejectionReason { TenantId = tenantId, Description = "Orderbevestiging of pakbon toegevoegd in plaats van een aankoopfactuur", IsIncompleteReason = true });
                    var incompleteReasonMissingEANId = await _rejectionReasonRepository.InsertAndGetIdAsync(new RejectionReason { TenantId = tenantId, Description = "Foto van de EAN code ontbreekt", IsIncompleteReason = true });

                    var rejectionReasonTranslationDoubleRegistrationNlNlId = await _rejectionReasonTranslationRepository.InsertAndGetIdAsync(new RejectionReasonTranslation { TenantId = tenantId, LocaleId = localeNlNlId, RejectionReasonId = rejectionReasonDoubleRegistrationId, Description = "Dit is een dubbele registratie." });
                    var rejectionReasonTranslationTestRegistrationNlNlId = await _rejectionReasonTranslationRepository.InsertAndGetIdAsync(new RejectionReasonTranslation { TenantId = tenantId, LocaleId = localeNlNlId, RejectionReasonId = rejectionReasonTestRegistrationId, Description = "Dit is een test registratie." });
                    var rejectionReasonTranslationBroughtBackNlNlId = await _rejectionReasonTranslationRepository.InsertAndGetIdAsync(new RejectionReasonTranslation { TenantId = tenantId, LocaleId = localeNlNlId, RejectionReasonId = rejectionReasonBroughtBackId, Description = "Het product is retour gebracht." });
                    var rejectionReasonTranslationIncorrectTypeNumberNlNlId = await _rejectionReasonTranslationRepository.InsertAndGetIdAsync(new RejectionReasonTranslation { TenantId = tenantId, LocaleId = localeNlNlId, RejectionReasonId = rejectionReasonIncorrectTypeNumberId, Description = "Het typenummer is onjuist." });
                    var rejectionReasonTranslationNoParticipatingRetailerNlNlId = await _rejectionReasonTranslationRepository.InsertAndGetIdAsync(new RejectionReasonTranslation { TenantId = tenantId, LocaleId = localeNlNlId, RejectionReasonId = rejectionReasonNoParticipatingRetailerId, Description = "De winkel neemt niet deel aan de actie." });
                    var rejectionReasonTranslationProductPurchasedOutsideOfTimeTableNlNlId = await _rejectionReasonTranslationRepository.InsertAndGetIdAsync(new RejectionReasonTranslation { TenantId = tenantId, LocaleId = localeNlNlId, RejectionReasonId = rejectionReasonProductPurchasedOutsideOfTimeTableId, Description = "Het product is gekocht buiten de actieperiode." });
                    var rejectionReasonTranslationCombiSetsNotEligibleNlNlId = await _rejectionReasonTranslationRepository.InsertAndGetIdAsync(new RejectionReasonTranslation { TenantId = tenantId, LocaleId = localeNlNlId, RejectionReasonId = rejectionReasonCombiSetsNotEligibleId, Description = "Combi-sets nemen niet deel aan de actie." });
                    var rejectionReasonTranslationIncorrectCampaignNlNlId = await _rejectionReasonTranslationRepository.InsertAndGetIdAsync(new RejectionReasonTranslation { TenantId = tenantId, LocaleId = localeNlNlId, RejectionReasonId = rejectionReasonIncorrectCampaignId, Description = "Dit is de verkeerde actie." });
                    var rejectionReasonTranslationExcludedDealersNlNlId = await _rejectionReasonTranslationRepository.InsertAndGetIdAsync(new RejectionReasonTranslation { TenantId = tenantId, LocaleId = localeNlNlId, RejectionReasonId = rejectionReasonExcludedDealersId, Description = "Dealers nemen niet deel aan de actie." });
                    var rejectionReasonTranslationDoubleRegistrationBeNlId = await _rejectionReasonTranslationRepository.InsertAndGetIdAsync(new RejectionReasonTranslation { TenantId = tenantId, LocaleId = localeBeNlId, RejectionReasonId = rejectionReasonDoubleRegistrationId, Description = "Dit is een dubbele registratie." });
                    var rejectionReasonTranslationTestRegistrationBeNlId = await _rejectionReasonTranslationRepository.InsertAndGetIdAsync(new RejectionReasonTranslation { TenantId = tenantId, LocaleId = localeBeNlId, RejectionReasonId = rejectionReasonTestRegistrationId, Description = "Dit is een test registratie." });
                    var rejectionReasonTranslationBroughtBackBeNlId = await _rejectionReasonTranslationRepository.InsertAndGetIdAsync(new RejectionReasonTranslation { TenantId = tenantId, LocaleId = localeBeNlId, RejectionReasonId = rejectionReasonBroughtBackId, Description = "Het product is retour gebracht." });
                    var rejectionReasonTranslationIncorrectTypeNumberBeNlId = await _rejectionReasonTranslationRepository.InsertAndGetIdAsync(new RejectionReasonTranslation { TenantId = tenantId, LocaleId = localeBeNlId, RejectionReasonId = rejectionReasonIncorrectTypeNumberId, Description = "Het typenummer is onjuist." });
                    var rejectionReasonTranslationNoParticipatingRetailerBeNlId = await _rejectionReasonTranslationRepository.InsertAndGetIdAsync(new RejectionReasonTranslation { TenantId = tenantId, LocaleId = localeBeNlId, RejectionReasonId = rejectionReasonNoParticipatingRetailerId, Description = "De winkel neemt niet deel aan de actie." });
                    var rejectionReasonTranslationProductPurchasedOutsideOfTimeTableBeNlId = await _rejectionReasonTranslationRepository.InsertAndGetIdAsync(new RejectionReasonTranslation { TenantId = tenantId, LocaleId = localeBeNlId, RejectionReasonId = rejectionReasonProductPurchasedOutsideOfTimeTableId, Description = "Het product is gekocht buiten de actieperiode." });
                    var rejectionReasonTranslationCombiSetsNotEligibleBeNlId = await _rejectionReasonTranslationRepository.InsertAndGetIdAsync(new RejectionReasonTranslation { TenantId = tenantId, LocaleId = localeBeNlId, RejectionReasonId = rejectionReasonCombiSetsNotEligibleId, Description = "Combi-sets nemen niet deel aan de actie." });
                    var rejectionReasonTranslationIncorrectCampaignBeNlId = await _rejectionReasonTranslationRepository.InsertAndGetIdAsync(new RejectionReasonTranslation { TenantId = tenantId, LocaleId = localeBeNlId, RejectionReasonId = rejectionReasonIncorrectCampaignId, Description = "Dit is de verkeerde actie." });
                    var rejectionReasonTranslationExcludedDealersBeNlId = await _rejectionReasonTranslationRepository.InsertAndGetIdAsync(new RejectionReasonTranslation { TenantId = tenantId, LocaleId = localeBeNlId, RejectionReasonId = rejectionReasonExcludedDealersId, Description = "Dealers nemen niet deel aan de actie." });
                    var rejectionReasonTranslationDoubleRegistrationBeFrId = await _rejectionReasonTranslationRepository.InsertAndGetIdAsync(new RejectionReasonTranslation { TenantId = tenantId, LocaleId = localeBeFrId, RejectionReasonId = rejectionReasonDoubleRegistrationId, Description = "Ceci est une inscription en double." });
                    var rejectionReasonTranslationTestRegistrationBeFrId = await _rejectionReasonTranslationRepository.InsertAndGetIdAsync(new RejectionReasonTranslation { TenantId = tenantId, LocaleId = localeBeFrId, RejectionReasonId = rejectionReasonTestRegistrationId, Description = "Ceci est une inscription test." });
                    var rejectionReasonTranslationBroughtBackBeFrId = await _rejectionReasonTranslationRepository.InsertAndGetIdAsync(new RejectionReasonTranslation { TenantId = tenantId, LocaleId = localeBeFrId, RejectionReasonId = rejectionReasonBroughtBackId, Description = "Le produit a été retourné." });
                    var rejectionReasonTranslationIncorrectTypeNumberBeFrId = await _rejectionReasonTranslationRepository.InsertAndGetIdAsync(new RejectionReasonTranslation { TenantId = tenantId, LocaleId = localeBeFrId, RejectionReasonId = rejectionReasonIncorrectTypeNumberId, Description = "Le numéro de type est incorrect." });
                    var rejectionReasonTranslationNoParticipatingRetailerBeFrId = await _rejectionReasonTranslationRepository.InsertAndGetIdAsync(new RejectionReasonTranslation { TenantId = tenantId, LocaleId = localeBeFrId, RejectionReasonId = rejectionReasonNoParticipatingRetailerId, Description = "Le magasin ne participe pas à la promotion." });
                    var rejectionReasonTranslationProductPurchasedOutsideOfTimeTableBeFrId = await _rejectionReasonTranslationRepository.InsertAndGetIdAsync(new RejectionReasonTranslation { TenantId = tenantId, LocaleId = localeBeFrId, RejectionReasonId = rejectionReasonProductPurchasedOutsideOfTimeTableId, Description = "Le produit a été acheté en dehors de la période promotionnelle." });
                    var rejectionReasonTranslationCombiSetsNotEligibleBeFrId = await _rejectionReasonTranslationRepository.InsertAndGetIdAsync(new RejectionReasonTranslation { TenantId = tenantId, LocaleId = localeBeFrId, RejectionReasonId = rejectionReasonCombiSetsNotEligibleId, Description = "Les ensembles combinés ne participent pas à la promotion." });
                    var rejectionReasonTranslationIncorrectCampaignBeFrId = await _rejectionReasonTranslationRepository.InsertAndGetIdAsync(new RejectionReasonTranslation { TenantId = tenantId, LocaleId = localeBeFrId, RejectionReasonId = rejectionReasonIncorrectCampaignId, Description = "Ceci est la mauvaise promotion." });
                    var rejectionReasonTranslationExcludedDealersBeFrId = await _rejectionReasonTranslationRepository.InsertAndGetIdAsync(new RejectionReasonTranslation { TenantId = tenantId, LocaleId = localeBeFrId, RejectionReasonId = rejectionReasonExcludedDealersId, Description = "Les revendeurs ne participent pas à la promotion." });

                    var incompleteReasonTranslationNonReadableNlNlId = await _rejectionReasonTranslationRepository.InsertAndGetIdAsync(new RejectionReasonTranslation { TenantId = tenantId, LocaleId = localeNlNlId, RejectionReasonId = incompleteReasonNonReadableId, Description = "Er is een niet-leesbaar document bijgevoegd of het (PDF) bestand kan niet geopend worden." });
                    var incompleteReasonTranslationWrongInvoiceNlNlId = await _rejectionReasonTranslationRepository.InsertAndGetIdAsync(new RejectionReasonTranslation { TenantId = tenantId, LocaleId = localeNlNlId, RejectionReasonId = incompleteReasonWrongInvoiceId, Description = "Er is een foutieve factuur of ander document bijgevoegd." });
                    var incompleteReasonTranslationWrongNAWNlNlId = await _rejectionReasonTranslationRepository.InsertAndGetIdAsync(new RejectionReasonTranslation { TenantId = tenantId, LocaleId = localeNlNlId, RejectionReasonId = incompleteReasonWrongNAWId, Description = "De NAW-gegevens (naam, adres, postcode en woonplaats) van de aanvrager komen niet overeen met de gegevens die op de aankoopnota staan. Deze gegevens dienen identiek te zijn." });
                    var incompleteReasonTranslationWrongDocumentNlNlId = await _rejectionReasonTranslationRepository.InsertAndGetIdAsync(new RejectionReasonTranslation { TenantId = tenantId, LocaleId = localeNlNlId, RejectionReasonId = incompleteReasonWrongDocumentId, Description = "Er is een orderbevestiging of pakbon toegevoegd in plaats van een aankoopfactuur." });
                    var incompleteReasonTranslationMissingEANNlNlId = await _rejectionReasonTranslationRepository.InsertAndGetIdAsync(new RejectionReasonTranslation { TenantId = tenantId, LocaleId = localeNlNlId, RejectionReasonId = incompleteReasonMissingEANId, Description = "We missen de foto van de EAN code. Deze kunt u terugvinden aan de onderkant van uw apparaat." });
                    var incompleteReasonTranslationNonReadableBeNlId = await _rejectionReasonTranslationRepository.InsertAndGetIdAsync(new RejectionReasonTranslation { TenantId = tenantId, LocaleId = localeBeNlId, RejectionReasonId = incompleteReasonNonReadableId, Description = "Er is een niet-leesbaar document bijgevoegd of het (PDF) bestand kan niet geopend worden." });
                    var incompleteReasonTranslationWrongInvoiceBeNlId = await _rejectionReasonTranslationRepository.InsertAndGetIdAsync(new RejectionReasonTranslation { TenantId = tenantId, LocaleId = localeBeNlId, RejectionReasonId = incompleteReasonWrongInvoiceId, Description = "Er is een foutieve factuur of ander document bijgevoegd." });
                    var incompleteReasonTranslationWrongNAWBeNlId = await _rejectionReasonTranslationRepository.InsertAndGetIdAsync(new RejectionReasonTranslation { TenantId = tenantId, LocaleId = localeBeNlId, RejectionReasonId = incompleteReasonWrongNAWId, Description = "De NAW-gegevens (naam, adres, postcode en woonplaats) van de aanvrager komen niet overeen met de gegevens die op de aankoopnota staan. Deze gegevens dienen identiek te zijn." });
                    var incompleteReasonTranslationWrongDocumentBeNlId = await _rejectionReasonTranslationRepository.InsertAndGetIdAsync(new RejectionReasonTranslation { TenantId = tenantId, LocaleId = localeBeNlId, RejectionReasonId = incompleteReasonWrongDocumentId, Description = "Er is een orderbevestiging of pakbon toegevoegd in plaats van een aankoopfactuur." });
                    var incompleteReasonTranslationMissingEANBeNlId = await _rejectionReasonTranslationRepository.InsertAndGetIdAsync(new RejectionReasonTranslation { TenantId = tenantId, LocaleId = localeBeNlId, RejectionReasonId = incompleteReasonMissingEANId, Description = "We missen de foto van de EAN code. Deze kunt u terugvinden aan de onderkant van uw apparaat." });
                    var incompleteReasonTranslationNonReadableBeFrId = await _rejectionReasonTranslationRepository.InsertAndGetIdAsync(new RejectionReasonTranslation { TenantId = tenantId, LocaleId = localeBeFrId, RejectionReasonId = incompleteReasonNonReadableId, Description = "Un document illisible a été inclus ou le fichier (PDF) ne peut pas être ouvert." });
                    var incompleteReasonTranslationWrongInvoiceBeFrId = await _rejectionReasonTranslationRepository.InsertAndGetIdAsync(new RejectionReasonTranslation { TenantId = tenantId, LocaleId = localeBeFrId, RejectionReasonId = incompleteReasonWrongInvoiceId, Description = "Une facture incorrecte ou un autre document a été inclus." });
                    var incompleteReasonTranslationWrongNAWBeFrId = await _rejectionReasonTranslationRepository.InsertAndGetIdAsync(new RejectionReasonTranslation { TenantId = tenantId, LocaleId = localeBeFrId, RejectionReasonId = incompleteReasonWrongNAWId, Description = "Le nom et l'adresse (nom, adresse, code postal et lieu de résidence) du demandeur ne correspondent pas aux informations figurant sur la facture d'achat. Ces informations doivent être identiques." });
                    var incompleteReasonTranslationWrongDocumentBeFrId = await _rejectionReasonTranslationRepository.InsertAndGetIdAsync(new RejectionReasonTranslation { TenantId = tenantId, LocaleId = localeBeFrId, RejectionReasonId = incompleteReasonWrongDocumentId, Description = "Une confirmation de commande ou un bon de livraison a été ajouté au lieu d'une facture d'achat." });
                    var incompleteReasonTranslationMissingEANBeFrId = await _rejectionReasonTranslationRepository.InsertAndGetIdAsync(new RejectionReasonTranslation { TenantId = tenantId, LocaleId = localeBeFrId, RejectionReasonId = incompleteReasonMissingEANId, Description = "Il nous manque l'image du code EAN. Vous pouvez le trouver au bas de votre appareil." });

                    //registration status
                    var registrationStatusPendingId = await _registrationStatusRepository.InsertAndGetIdAsync(new RegistrationStatus { TenantId = tenantId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, IsActive = true, StatusCode = "100", Description = "Pending" });
                    var registrationStatusAwaitingInvoiceId = await _registrationStatusRepository.InsertAndGetIdAsync(new RegistrationStatus { TenantId = tenantId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, IsActive = true, StatusCode = "110", Description = "Awaiting Invoice Check" });
                    var registrationStatusApprovedId = await _registrationStatusRepository.InsertAndGetIdAsync(new RegistrationStatus { TenantId = tenantId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, IsActive = true, StatusCode = "200", Description = "Approved" });
                    var registrationStatusInProgressId = await _registrationStatusRepository.InsertAndGetIdAsync(new RegistrationStatus { TenantId = tenantId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, IsActive = true, StatusCode = "300", Description = "In Progress" });
                    var registrationStatusSentId = await _registrationStatusRepository.InsertAndGetIdAsync(new RegistrationStatus { TenantId = tenantId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, IsActive = true, StatusCode = "400", Description = "Sent" });
                    var registrationStatusIncompleteId = await _registrationStatusRepository.InsertAndGetIdAsync(new RegistrationStatus { TenantId = tenantId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, IsActive = true, StatusCode = "500", Description = "Incomplete" });
                    var registrationStatusRejectedId = await _registrationStatusRepository.InsertAndGetIdAsync(new RegistrationStatus { TenantId = tenantId, CreatorUserId = 1, CreationTime = DateTime.Now, IsDeleted = false, IsActive = true, StatusCode = "999", Description = "Rejected" });

                    //handlingbatch status
                    var handlingBatchStatusPendingId = await _handlingBatchStatusRepository.InsertAndGetIdAsync(new HandlingBatchStatus { TenantId = tenantId, StatusCode = "100", StatusDescription = "Pending" });
                    var handlingBatchStatusInProgressId = await _handlingBatchStatusRepository.InsertAndGetIdAsync(new HandlingBatchStatus { TenantId = tenantId, StatusCode = "200", StatusDescription = "In Progress" });
                    var handlingBatchStatusProcessedPartiallyWithFailedOrdersId = await _handlingBatchStatusRepository.InsertAndGetIdAsync(new HandlingBatchStatus { TenantId = tenantId, StatusCode = "210", StatusDescription = "Processed partially with failed orders" });
                    var handlingBatchStatusProcessedPartiallyWithBlockedLinesId = await _handlingBatchStatusRepository.InsertAndGetIdAsync(new HandlingBatchStatus { TenantId = tenantId, StatusCode = "220", StatusDescription = "Processed partially with blocked lines" });
                    var handlingBatchStatusProcessedPartiallyWithFailedOrdersAndBlockedLinesId = await _handlingBatchStatusRepository.InsertAndGetIdAsync(new HandlingBatchStatus { TenantId = tenantId, StatusCode = "230", StatusDescription = "Processed partially with failed orders & blocked lines" });
                    var handlingBatchStatusUnprocessedFailedOrdersId = await _handlingBatchStatusRepository.InsertAndGetIdAsync(new HandlingBatchStatus { TenantId = tenantId, StatusCode = "240", StatusDescription = "Unprocessed because of failed orders" });
                    var handlingBatchStatusUnprocessedBlockedLinesId = await _handlingBatchStatusRepository.InsertAndGetIdAsync(new HandlingBatchStatus { TenantId = tenantId, StatusCode = "250", StatusDescription = "Unprocessed because of blocked lines" });
                    var handlingBatchStatusUnprocessedFailedOrdersAndBlockedLinesId = await _handlingBatchStatusRepository.InsertAndGetIdAsync(new HandlingBatchStatus { TenantId = tenantId, StatusCode = "260", StatusDescription = "Unprocessed because of failed orders & blocked lines" });
                    var handlingBatchStatusFinishedId = await _handlingBatchStatusRepository.InsertAndGetIdAsync(new HandlingBatchStatus { TenantId = tenantId, StatusCode = "300", StatusDescription = "Finished" });
                    var handlingBatchStatusCancelledId = await _handlingBatchStatusRepository.InsertAndGetIdAsync(new HandlingBatchStatus { TenantId = tenantId, StatusCode = "900", StatusDescription = "Cancelled" });

                    //handlingbatchline status
                    var handlingBatchLineStatusPendingId = await _handlingBatchLineStatusRepository.InsertAndGetIdAsync(new HandlingBatchLineStatus { TenantId = tenantId, StatusCode = "100", StatusDescription = "Pending" });
                    var handlingBatchLineStatusInProgressId = await _handlingBatchLineStatusRepository.InsertAndGetIdAsync(new HandlingBatchLineStatus { TenantId = tenantId, StatusCode = "200", StatusDescription = "In Progress" });
                    var handlingBatchLineStatusFinishedId = await _handlingBatchLineStatusRepository.InsertAndGetIdAsync(new HandlingBatchLineStatus { TenantId = tenantId, StatusCode = "300", StatusDescription = "Finished" });
                    var handlingBatchLineStatusFailedId = await _handlingBatchLineStatusRepository.InsertAndGetIdAsync(new HandlingBatchLineStatus { TenantId = tenantId, StatusCode = "600", StatusDescription = "Failed" });
                    var handlingBatchLineStatusBlockedId = await _handlingBatchLineStatusRepository.InsertAndGetIdAsync(new HandlingBatchLineStatus { TenantId = tenantId, StatusCode = "700", StatusDescription = "Blocked" });
                    var handlingBatchLineStatusCancelledId = await _handlingBatchLineStatusRepository.InsertAndGetIdAsync(new HandlingBatchLineStatus { TenantId = tenantId, StatusCode = "900", StatusDescription = "Cancelled" });

                    //message variables
                    var messageVariableRegistrationIdId = await _messageVariableRepository.InsertAndGetIdAsync(new MessageVariable { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, Description = "RegistrationId", RmsTable = "Registration", TableField = "Id" });
                    var messageVariableLastNameId = await _messageVariableRepository.InsertAndGetIdAsync(new MessageVariable { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, Description = "LastName", RmsTable = "Registration", TableField = "LastName" });
                    var messageVariableCampaignDescriptionId = await _messageVariableRepository.InsertAndGetIdAsync(new MessageVariable { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, Description = "CampaignDescription", RmsTable = "Campaign", TableField = "Description" });
                    var messageVariableCampaignNameId = await _messageVariableRepository.InsertAndGetIdAsync(new MessageVariable { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, Description = "CampaignName", RmsTable = "Campaign", TableField = "Name" });
                    var messageVariablePasswordId = await _messageVariableRepository.InsertAndGetIdAsync(new MessageVariable { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, Description = "Password", RmsTable = "Registration", TableField = "Password" });
                    var messageVariableIncompleteFieldsId = await _messageVariableRepository.InsertAndGetIdAsync(new MessageVariable { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, Description = "IncompleteRegistrationFields", RmsTable = "Registration", TableField = "IncompleteFields" });
                    var messageVariableRejectionReasonId = await _messageVariableRepository.InsertAndGetIdAsync(new MessageVariable { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, Description = "RejectionReason", RmsTable = "Registration", TableField = "RejectionReasonId" });
                    var messageVariableActivationCodeId = await _messageVariableRepository.InsertAndGetIdAsync(new MessageVariable { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, Description = "ActivationCode", RmsTable = String.Empty, TableField = String.Empty });

                    //messaging: process events with relation to campaign type and registration status
                    var processEventCustomerRegistrationId = await _processEventRepository.InsertAndGetIdAsync(new ProcessEvent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, IsActive = true, Name = "Customer Registration" });
                    var processEventActivationCodeId = await _processEventRepository.InsertAndGetIdAsync(new ProcessEvent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, IsActive = true, Name = "Activationcode" });

                    var campaignTypeEventCashRefundCustomerRegistrationId = await _campaignTypeEventRepository.InsertAndGetIdAsync(new CampaignTypeEvent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, SortOrder = 1, CampaignTypeId = campaignTypeCashRefundId, ProcessEventId = processEventCustomerRegistrationId });
                    var campaignTypeEventPremiumCustomerRegistrationId = await _campaignTypeEventRepository.InsertAndGetIdAsync(new CampaignTypeEvent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, SortOrder = 1, CampaignTypeId = campaignTypePremiumdId, ProcessEventId = processEventCustomerRegistrationId });
                    var campaignTypeEventActivationCodeCustomerRegistrationId = await _campaignTypeEventRepository.InsertAndGetIdAsync(new CampaignTypeEvent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, SortOrder = 1, CampaignTypeId = campaignTypeActivationCodeId, ProcessEventId = processEventCustomerRegistrationId });
                    var campaignTypeEventActivationCodeActivationcodeId = await _campaignTypeEventRepository.InsertAndGetIdAsync(new CampaignTypeEvent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, SortOrder = 666, CampaignTypeId = campaignTypeActivationCodeId, ProcessEventId = processEventActivationCodeId });

                    //(cash refund)
                    var campaignTypeEventRegistrationStatusCashRefundPendingId = await _campaignTypeEventRegistrationStatusRepository.InsertAndGetIdAsync(new CampaignTypeEventRegistrationStatus { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, SortOrder = 1, CampaignTypeEventId = campaignTypeEventCashRefundCustomerRegistrationId, RegistrationStatusId = registrationStatusPendingId });
                    var campaignTypeEventRegistrationStatusCashRefundApprovedId = await _campaignTypeEventRegistrationStatusRepository.InsertAndGetIdAsync(new CampaignTypeEventRegistrationStatus { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, SortOrder = 2, CampaignTypeEventId = campaignTypeEventCashRefundCustomerRegistrationId, RegistrationStatusId = registrationStatusApprovedId });
                    var campaignTypeEventRegistrationStatusCashRefundRejectedId = await _campaignTypeEventRegistrationStatusRepository.InsertAndGetIdAsync(new CampaignTypeEventRegistrationStatus { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, SortOrder = 3, CampaignTypeEventId = campaignTypeEventCashRefundCustomerRegistrationId, RegistrationStatusId = registrationStatusRejectedId });
                    var campaignTypeEventRegistrationStatusCashRefundIncompleteId = await _campaignTypeEventRegistrationStatusRepository.InsertAndGetIdAsync(new CampaignTypeEventRegistrationStatus { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, SortOrder = 4, CampaignTypeEventId = campaignTypeEventCashRefundCustomerRegistrationId, RegistrationStatusId = registrationStatusIncompleteId });

                    //(premium)
                    var campaignTypeEventRegistrationStatusPremiumPendingId = await _campaignTypeEventRegistrationStatusRepository.InsertAndGetIdAsync(new CampaignTypeEventRegistrationStatus { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, SortOrder = 1, CampaignTypeEventId = campaignTypeEventPremiumCustomerRegistrationId, RegistrationStatusId = registrationStatusPendingId });
                    var campaignTypeEventRegistrationStatusPremiumApprovedId = await _campaignTypeEventRegistrationStatusRepository.InsertAndGetIdAsync(new CampaignTypeEventRegistrationStatus { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, SortOrder = 2, CampaignTypeEventId = campaignTypeEventPremiumCustomerRegistrationId, RegistrationStatusId = registrationStatusApprovedId });
                    var campaignTypeEventRegistrationStatusPremiumRejectedId = await _campaignTypeEventRegistrationStatusRepository.InsertAndGetIdAsync(new CampaignTypeEventRegistrationStatus { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, SortOrder = 3, CampaignTypeEventId = campaignTypeEventPremiumCustomerRegistrationId, RegistrationStatusId = registrationStatusRejectedId });
                    var campaignTypeEventRegistrationStatusPremiumIncompleteId = await _campaignTypeEventRegistrationStatusRepository.InsertAndGetIdAsync(new CampaignTypeEventRegistrationStatus { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, SortOrder = 4, CampaignTypeEventId = campaignTypeEventPremiumCustomerRegistrationId, RegistrationStatusId = registrationStatusIncompleteId });

                    //(activation code)
                    var campaignTypeEventRegistrationStatusActivationCodePendingId = await _campaignTypeEventRegistrationStatusRepository.InsertAndGetIdAsync(new CampaignTypeEventRegistrationStatus { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, SortOrder = 1, CampaignTypeEventId = campaignTypeEventActivationCodeCustomerRegistrationId, RegistrationStatusId = registrationStatusPendingId });
                    var campaignTypeEventRegistrationStatusActivationCodeApprovedId = await _campaignTypeEventRegistrationStatusRepository.InsertAndGetIdAsync(new CampaignTypeEventRegistrationStatus { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, SortOrder = 2, CampaignTypeEventId = campaignTypeEventActivationCodeCustomerRegistrationId, RegistrationStatusId = registrationStatusApprovedId });
                    var campaignTypeEventRegistrationStatusActivationCodeRejectedId = await _campaignTypeEventRegistrationStatusRepository.InsertAndGetIdAsync(new CampaignTypeEventRegistrationStatus { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, SortOrder = 3, CampaignTypeEventId = campaignTypeEventActivationCodeCustomerRegistrationId, RegistrationStatusId = registrationStatusRejectedId });
                    var campaignTypeEventRegistrationStatusActivationCodeIncompleteId = await _campaignTypeEventRegistrationStatusRepository.InsertAndGetIdAsync(new CampaignTypeEventRegistrationStatus { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, SortOrder = 4, CampaignTypeEventId = campaignTypeEventActivationCodeCustomerRegistrationId, RegistrationStatusId = registrationStatusIncompleteId });
                    var campaignTypeEventRegistrationStatusActivationCodeInProgressId = await _campaignTypeEventRegistrationStatusRepository.InsertAndGetIdAsync(new CampaignTypeEventRegistrationStatus { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, SortOrder = 666, CampaignTypeEventId = campaignTypeEventActivationCodeActivationcodeId, RegistrationStatusId = registrationStatusInProgressId });

                    //messaging: the actual stuff
                    var messageId = await _messageRepository.InsertAndGetIdAsync(new Message { TenantId = tenantId, SystemLevelId = systemLevelCompanyId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, Version = "1.0" });
                    var messageTypeId = await _messageTypeRepository.InsertAndGetIdAsync(new MessageType { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, IsActive = true, Name = "Mail", Source = "ict@servicebureau.nl", MessageId = messageId });

                    var messageComponentTypeHeaderId = await _messageComponentTypeRepository.InsertAndGetIdAsync(new MessageComponentType { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, Name = "Header" });
                    var messageComponentTypeBodyId = await _messageComponentTypeRepository.InsertAndGetIdAsync(new MessageComponentType { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, Name = "Body" });
                    var messageComponentTypeFooterId = await _messageComponentTypeRepository.InsertAndGetIdAsync(new MessageComponentType { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, Name = "Footer" });
                    var messageComponentTypeSubjectId = await _messageComponentTypeRepository.InsertAndGetIdAsync(new MessageComponentType { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, Name = "Subject" });

                    var messageComponentHeaderId = await _messageComponentRepository.InsertAndGetIdAsync(new MessageComponent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, IsActive = true, MessageTypeId = messageTypeId, MessageComponentTypeId = messageComponentTypeHeaderId });
                    var messageComponentBodyId = await _messageComponentRepository.InsertAndGetIdAsync(new MessageComponent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, IsActive = true, MessageTypeId = messageTypeId, MessageComponentTypeId = messageComponentTypeBodyId });
                    var messageComponentFooterId = await _messageComponentRepository.InsertAndGetIdAsync(new MessageComponent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, IsActive = true, MessageTypeId = messageTypeId, MessageComponentTypeId = messageComponentTypeFooterId });
                    var messageComponentSubjectId = await _messageComponentRepository.InsertAndGetIdAsync(new MessageComponent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, IsActive = true, MessageTypeId = messageTypeId, MessageComponentTypeId = messageComponentTypeSubjectId });

                    //thank you message (registration is pending)
                    //(cash refund)
                    var messageComponentContentPendingCashRefundHeaderId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusCashRefundPendingId, MessageComponentId = messageComponentHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Beste Hr/Mevr. #{LastName},</p>" });
                    var messageComponentContentPendingCashRefundBodyId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusCashRefundPendingId, MessageComponentId = messageComponentBodyId, Content = "<p>Uw inschrijving met referentienummer #{RegistrationId} is goed ontvangen en hierbij bevestigd.</p><p>Wij controleren uw gegevens en binnen 4 weken hoort u van ons of uw inschrijving is goedgekeurd.</p>" });
                    var messageComponentContentPendingCashRefundFooterId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusCashRefundPendingId, MessageComponentId = messageComponentFooterId, Content = "<p>Met vriendelijke groet,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Dit is een automatisch gegenereerd bericht. U kunt hier niet op reageren.</p>" });
                    var messageComponentContentPendingCashRefundSubjectId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusCashRefundPendingId, MessageComponentId = messageComponentSubjectId, Content = "#{CampaignName}" });

                    //(premium)
                    var messageComponentContentPendingPremiumHeaderId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusPremiumPendingId, MessageComponentId = messageComponentHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Beste Hr/Mevr. #{LastName},</p>" });
                    var messageComponentContentPendingPremiumBodyId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusPremiumPendingId, MessageComponentId = messageComponentBodyId, Content = "<p>Uw inschrijving met referentienummer #{RegistrationId} is goed ontvangen en hierbij bevestigd.</p><p>Wij controleren uw gegevens en binnen 4 weken hoort u van ons of uw inschrijving is goedgekeurd.</p>" });
                    var messageComponentContentPendingPremiumFooterId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusPremiumPendingId, MessageComponentId = messageComponentFooterId, Content = "<p>Met vriendelijke groet,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Dit is een automatisch gegenereerd bericht. U kunt hier niet op reageren.</p>" });
                    var messageComponentContentPendingPremiumSubjectId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusPremiumPendingId, MessageComponentId = messageComponentSubjectId, Content = "#{CampaignName}" });

                    //(activation code)
                    var messageComponentContentPendingActivationCodeHeaderId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusActivationCodePendingId, MessageComponentId = messageComponentHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Beste Hr/Mevr. #{LastName},</p>" });
                    var messageComponentContentPendingActivationCodeBodyId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusActivationCodePendingId, MessageComponentId = messageComponentBodyId, Content = "<p>Uw inschrijving met referentienummer #{RegistrationId} is goed ontvangen en hierbij bevestigd.</p><p>Wij controleren uw gegevens en binnen 4 weken hoort u van ons of uw inschrijving is goedgekeurd.</p>" });
                    var messageComponentContentPendingActivationCodeFooterId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusActivationCodePendingId, MessageComponentId = messageComponentFooterId, Content = "<p>Met vriendelijke groet,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Dit is een automatisch gegenereerd bericht. U kunt hier niet op reageren.</p>" });
                    var messageComponentContentPendingActivationCodeSubjectId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusActivationCodePendingId, MessageComponentId = messageComponentSubjectId, Content = "#{CampaignName}" });

                    //approval message (registration is approved)
                    //(cash refund)
                    var messageComponentContentApprovedCashRefundHeaderId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusCashRefundApprovedId, MessageComponentId = messageComponentHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Beste Hr/Mevr. #{LastName},</p>" });
                    var messageComponentContentApprovedCashRefundBodyId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusCashRefundApprovedId, MessageComponentId = messageComponentBodyId, Content = "<p>Uw inschrijving met referentienummer #{RegistrationId} is hierbij goedgekeurd. U ontvangt zo spoedig mogelijk uw cashback.</p>" });
                    var messageComponentContentApprovedCashRefundFooterId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusCashRefundApprovedId, MessageComponentId = messageComponentFooterId, Content = "<p>Met vriendelijke groet,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Dit is een automatisch gegenereerd bericht. U kunt hier niet op reageren.</p>" });
                    var messageComponentContentApprovedCashRefundSubjectId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusCashRefundApprovedId, MessageComponentId = messageComponentSubjectId, Content = "#{CampaignName}" });

                    //(premium)
                    var messageComponentContentApprovedPremiumHeaderId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusPremiumApprovedId, MessageComponentId = messageComponentHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Beste Hr/Mevr. #{LastName},</p>" });
                    var messageComponentContentApprovedPremiumBodyId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusPremiumApprovedId, MessageComponentId = messageComponentBodyId, Content = "<p>Uw inschrijving met referentienummer #{RegistrationId} is hierbij goedgekeurd. U ontvangt zo spoedig mogelijk uw geschenk.</p>" });
                    var messageComponentContentApprovedPremiumFooterId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusPremiumApprovedId, MessageComponentId = messageComponentFooterId, Content = "<p>Met vriendelijke groet,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Dit is een automatisch gegenereerd bericht. U kunt hier niet op reageren.</p>" });
                    var messageComponentContentApprovedPremiumSubjectId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusPremiumApprovedId, MessageComponentId = messageComponentSubjectId, Content = "#{CampaignName}" });

                    //(activation code)
                    var messageComponentContentApprovedActivationCodeHeaderId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusActivationCodeApprovedId, MessageComponentId = messageComponentHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Beste Hr/Mevr. #{LastName},</p>" });
                    var messageComponentContentApprovedActivationCodeBodyId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusActivationCodeApprovedId, MessageComponentId = messageComponentBodyId, Content = "<p>Uw inschrijving met referentienummer #{RegistrationId} is hierbij goedgekeurd. U ontvangt zo spoedig mogelijk uw activatie code.</p>" });
                    var messageComponentContentApprovedActivationCodeFooterId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusActivationCodeApprovedId, MessageComponentId = messageComponentFooterId, Content = "<p>Met vriendelijke groet,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Dit is een automatisch gegenereerd bericht. U kunt hier niet op reageren.</p>" });
                    var messageComponentContentApprovedActivationCodeSubjectId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusActivationCodeApprovedId, MessageComponentId = messageComponentSubjectId, Content = "#{CampaignName}" });

                    //rejection message (registration is rejected)
                    //(cash refund)
                    var messageComponentContentRejectedCashRefundHeaderId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusCashRefundRejectedId, MessageComponentId = messageComponentHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Beste Hr/Mevr. #{LastName},</p>" });
                    var messageComponentContentRejectedCashRefundBodyId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusCashRefundRejectedId, MessageComponentId = messageComponentBodyId, Content = "<p>Uw inschrijving met referentienummer #{RegistrationId} is helaas afgekeurd, om de volgende reden:</p><p>#{RejectionReason}</p>" });
                    var messageComponentContentRejectedCashRefundFooterId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusCashRefundRejectedId, MessageComponentId = messageComponentFooterId, Content = "<p>Met vriendelijke groet,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Dit is een automatisch gegenereerd bericht. U kunt hier niet op reageren.</p>" });
                    var messageComponentContentRejectedCashRefundSubjectId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusCashRefundRejectedId, MessageComponentId = messageComponentSubjectId, Content = "#{CampaignName}" });

                    //(premium)
                    var messageComponentContentRejectedPremiumHeaderId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusPremiumRejectedId, MessageComponentId = messageComponentHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Beste Hr/Mevr. #{LastName},</p>" });
                    var messageComponentContentRejectedPremiumBodyId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusPremiumRejectedId, MessageComponentId = messageComponentBodyId, Content = "<p>Uw inschrijving met referentienummer #{RegistrationId} is helaas afgekeurd, om de volgende reden:</p><p>#{RejectionReason}</p>" });
                    var messageComponentContentRejectedPremiumFooterId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusPremiumRejectedId, MessageComponentId = messageComponentFooterId, Content = "<p>Met vriendelijke groet,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Dit is een automatisch gegenereerd bericht. U kunt hier niet op reageren.</p>" });
                    var messageComponentContentRejectedPremiumSubjectId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusPremiumRejectedId, MessageComponentId = messageComponentSubjectId, Content = "#{CampaignName}" });

                    //(activation code)
                    var messageComponentContentRejectedActivationCodeHeaderId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusActivationCodeRejectedId, MessageComponentId = messageComponentHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Beste Hr/Mevr. #{LastName},</p>" });
                    var messageComponentContentRejectedActivationCodeBodyId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusActivationCodeRejectedId, MessageComponentId = messageComponentBodyId, Content = "<p>Uw inschrijving met referentienummer #{RegistrationId} is helaas afgekeurd, om de volgende reden:</p><p>#{RejectionReason}</p>" });
                    var messageComponentContentRejectedActivationCodeFooterId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusActivationCodeRejectedId, MessageComponentId = messageComponentFooterId, Content = "<p>Met vriendelijke groet,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Dit is een automatisch gegenereerd bericht. U kunt hier niet op reageren.</p>" });
                    var messageComponentContentRejectedActivationCodeSubjectId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusActivationCodeRejectedId, MessageComponentId = messageComponentSubjectId, Content = "#{CampaignName}" });

                    //incomplete message (registration is incomplete)
                    //(cash refund)
                    var messageComponentContentIncompleteCashRefundHeaderId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusCashRefundIncompleteId, MessageComponentId = messageComponentHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Beste Hr/Mevr. #{LastName},</p>" });
                    var messageComponentContentIncompleteCashRefundBodyId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusCashRefundIncompleteId, MessageComponentId = messageComponentBodyId, Content = "<p>Uw inschrijving met referentienummer #{RegistrationId} is gecontroleerd en niet goedgekeurd, om de volgende reden:</p><p>#{RejectionReason}</p><p>Gebruik onderstaande link en wachtwoord om uw inschrijving te wijzigen.</p><p>Wachtwoord: #{Password}</p><p><a href=\"https://sbj.rms2.eu/nl_nl/registrations/#{RegistrationId}/edit\" rel=\"noopener noreferrer\" target=\"_blank\">https://sbj.rms2.eu/nl_nl/registrations/#{RegistrationId}/edit</a></p>" });
                    var messageComponentContentIncompleteCashRefundFooterId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusCashRefundIncompleteId, MessageComponentId = messageComponentFooterId, Content = "<p>Met vriendelijke groet,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Dit is een automatisch gegenereerd bericht. U kunt hier niet op reageren.</p>" });
                    var messageComponentContentIncompleteCashRefundSubjectId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusCashRefundIncompleteId, MessageComponentId = messageComponentSubjectId, Content = "#{CampaignName}" });

                    //(premium)
                    var messageComponentContentIncompletePremiumHeaderId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusPremiumIncompleteId, MessageComponentId = messageComponentHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Beste Hr/Mevr. #{LastName},</p>" });
                    var messageComponentContentIncompletePremiumBodyId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusPremiumIncompleteId, MessageComponentId = messageComponentBodyId, Content = "<p>Uw inschrijving met referentienummer #{RegistrationId} is gecontroleerd en niet goedgekeurd, om de volgende reden:</p><p>#{RejectionReason}</p><p>Gebruik onderstaande link en wachtwoord om uw inschrijving te wijzigen.</p><p>Wachtwoord: #{Password}</p><p><a href=\"https://sbj.rms2.eu/nl_nl/registrations/#{RegistrationId}/edit\" rel=\"noopener noreferrer\" target=\"_blank\">https://sbj.rms2.eu/nl_nl/registrations/#{RegistrationId}/edit</a></p>" });
                    var messageComponentContentIncompletePremiumFooterId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusPremiumIncompleteId, MessageComponentId = messageComponentFooterId, Content = "<p>Met vriendelijke groet,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Dit is een automatisch gegenereerd bericht. U kunt hier niet op reageren.</p>" });
                    var messageComponentContentIncompletePremiumSubjectId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusPremiumIncompleteId, MessageComponentId = messageComponentSubjectId, Content = "#{CampaignName}" });

                    //(activation code)
                    var messageComponentContentIncompleteActivationCodeHeaderId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusActivationCodeIncompleteId, MessageComponentId = messageComponentHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Beste Hr/Mevr. #{LastName},</p>" });
                    var messageComponentContentIncompleteActivationCodeBodyId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusActivationCodeIncompleteId, MessageComponentId = messageComponentBodyId, Content = "<p>Uw inschrijving met referentienummer #{RegistrationId} is gecontroleerd en niet goedgekeurd, om de volgende reden:</p><p>#{RejectionReason}</p><p>Gebruik onderstaande link en wachtwoord om uw inschrijving te wijzigen.</p><p>Wachtwoord: #{Password}</p><p><a href=\"https://sbj.rms2.eu/nl_nl/registrations/#{RegistrationId}/edit\" rel=\"noopener noreferrer\" target=\"_blank\">https://sbj.rms2.eu/nl_nl/registrations/#{RegistrationId}/edit</a></p>" });
                    var messageComponentContentIncompleteActivationCodeFooterId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusActivationCodeIncompleteId, MessageComponentId = messageComponentFooterId, Content = "<p>Met vriendelijke groet,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Dit is een automatisch gegenereerd bericht. U kunt hier niet op reageren.</p>" });
                    var messageComponentContentIncompleteActivationCodeSubjectId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusActivationCodeIncompleteId, MessageComponentId = messageComponentSubjectId, Content = "#{CampaignName}" });

                    //activation code message (registration is in progress) [this message is only applicable for ActivationCode campaigns]
                    var messageComponentContentInProgressActivationCodeHeaderId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusActivationCodeInProgressId, MessageComponentId = messageComponentHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Beste Hr/Mevr. #{LastName},</p>" });
                    var messageComponentContentInProgressActivationCodeBodyId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusActivationCodeInProgressId, MessageComponentId = messageComponentBodyId, Content = "<p>Naar aanleiding van uw goedgekeurde inschrijving met referentienummer #{RegistrationId} ontvangt u hierbij uw activatie code.</p><p>Uw activatie code: <strong>#{ActivationCode}</strong></p>" });
                    var messageComponentContentInProgressActivationCodeFooterId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusActivationCodeInProgressId, MessageComponentId = messageComponentFooterId, Content = "<p>Met vriendelijke groet,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Dit is een automatisch gegenereerd bericht. U kunt hier niet op reageren.</p>" });
                    var messageComponentContentInProgressActivationCodeSubjectId = await _messageComponentContentRepository.InsertAndGetIdAsync(new MessageComponentContent { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, CampaignTypeEventRegistrationStatusId = campaignTypeEventRegistrationStatusActivationCodeInProgressId, MessageComponentId = messageComponentSubjectId, Content = "#{CampaignName}" });

                    //messaging translations
                    //thank you message
                    //(cash refund -> nl_nl)
                    var messageContentTranslationPendingCashRefundHeaderNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentPendingCashRefundHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Beste Hr/Mevr. #{LastName},</p>" });
                    var messageContentTranslationPendingCashRefundBodyNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentPendingCashRefundBodyId, Content = "<p>Uw inschrijving met referentienummer #{RegistrationId} is goed ontvangen en hierbij bevestigd.</p><p>Wij controleren uw gegevens en binnen 4 weken hoort u van ons of uw inschrijving is goedgekeurd.</p>" });
                    var messageContentTranslationPendingCashRefundFooterNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentPendingCashRefundFooterId, Content = "<p>Met vriendelijke groet,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Dit is een automatisch gegenereerd bericht. U kunt hier niet op reageren.</p>" });
                    var messageContentTranslationPendingCashRefundSubjectNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentPendingCashRefundSubjectId, Content = "#{CampaignName}" });

                    //(cash refund -> be_nl)
                    var messageContentTranslationPendingCashRefundHeaderBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentPendingCashRefundHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Beste Hr/Mevr. #{LastName},</p>" });
                    var messageContentTranslationPendingCashRefundBodyBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentPendingCashRefundBodyId, Content = "<p>Uw inschrijving met referentienummer #{RegistrationId} is goed ontvangen en hierbij bevestigd.</p><p>Wij controleren uw gegevens en binnen 4 weken hoort u van ons of uw inschrijving is goedgekeurd.</p>" });
                    var messageContentTranslationPendingCashRefundFooterBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentPendingCashRefundFooterId, Content = "<p>Met vriendelijke groet,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Dit is een automatisch gegenereerd bericht. U kunt hier niet op reageren.</p>" });
                    var messageContentTranslationPendingCashRefundSubjectBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentPendingCashRefundSubjectId, Content = "#{CampaignName}" });

                    //(cash refund -> be_fr)
                    var messageContentTranslationPendingCashRefundHeaderBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentPendingCashRefundHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Cher M. / Mme. #{LastName},</p>" });
                    var messageContentTranslationPendingCashRefundBodyBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentPendingCashRefundBodyId, Content = "<p>Votre inscription avec le numéro de référence #{RegistrationId} a été reçue et confirmée.</p><p>Nous vérifierons vos coordonnées et dans les 4 semaines, nous vous informerons si votre inscription a été approuvée.</p>" });
                    var messageContentTranslationPendingCashRefundFooterBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentPendingCashRefundFooterId, Content = "<p>Cordialement,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Ceci est un message généré automatiquement. Vous ne pouvez pas répondre à cela.</p>" });
                    var messageContentTranslationPendingCashRefundSubjectBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentPendingCashRefundSubjectId, Content = "#{CampaignName}" });

                    //(premium -> nl_nl)
                    var messageContentTranslationPendingPremiumHeaderNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentPendingPremiumHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Beste Hr/Mevr. #{LastName},</p>" });
                    var messageContentTranslationPendingPremiumBodyNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentPendingPremiumBodyId, Content = "<p>Uw inschrijving met referentienummer #{RegistrationId} is goed ontvangen en hierbij bevestigd.</p><p>Wij controleren uw gegevens en binnen 4 weken hoort u van ons of uw inschrijving is goedgekeurd.</p>" });
                    var messageContentTranslationPendingPremiumFooterNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentPendingPremiumFooterId, Content = "<p>Met vriendelijke groet,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Dit is een automatisch gegenereerd bericht. U kunt hier niet op reageren.</p>" });
                    var messageContentTranslationPendingPremiumSubjectNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentPendingPremiumSubjectId, Content = "#{CampaignName}" });

                    //(premium -> be_nl)
                    var messageContentTranslationPendingPremiumHeaderBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentPendingPremiumHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Beste Hr/Mevr. #{LastName},</p>" });
                    var messageContentTranslationPendingPremiumBodyBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentPendingPremiumBodyId, Content = "<p>Uw inschrijving met referentienummer #{RegistrationId} is goed ontvangen en hierbij bevestigd.</p><p>Wij controleren uw gegevens en binnen 4 weken hoort u van ons of uw inschrijving is goedgekeurd.</p>" });
                    var messageContentTranslationPendingPremiumFooterBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentPendingPremiumFooterId, Content = "<p>Met vriendelijke groet,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Dit is een automatisch gegenereerd bericht. U kunt hier niet op reageren.</p>" });
                    var messageContentTranslationPendingPremiumSubjectBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentPendingPremiumSubjectId, Content = "#{CampaignName}" });

                    //(premium -> be_fr)
                    var messageContentTranslationPendingPremiumHeaderBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentPendingPremiumHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Cher M. / Mme. #{LastName},</p>" });
                    var messageContentTranslationPendingPremiumBodyBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentPendingPremiumBodyId, Content = "<p>Votre inscription avec le numéro de référence #{RegistrationId} a été reçue et confirmée.</p><p>Nous vérifierons vos coordonnées et dans les 4 semaines, nous vous informerons si votre inscription a été approuvée.</p>" });
                    var messageContentTranslationPendingPremiumFooterBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentPendingPremiumFooterId, Content = "<p>Cordialement,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Ceci est un message généré automatiquement. Vous ne pouvez pas répondre à cela.</p>" });
                    var messageContentTranslationPendingPremiumSubjectBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentPendingPremiumSubjectId, Content = "#{CampaignName}" });

                    //(activation code -> nl_nl)
                    var messageContentTranslationPendingActivationCodeHeaderNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentPendingActivationCodeHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Beste Hr/Mevr. #{LastName},</p>" });
                    var messageContentTranslationPendingActivationCodeBodyNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentPendingActivationCodeBodyId, Content = "<p>Uw inschrijving met referentienummer #{RegistrationId} is goed ontvangen en hierbij bevestigd.</p><p>Wij controleren uw gegevens en binnen 4 weken hoort u van ons of uw inschrijving is goedgekeurd.</p>" });
                    var messageContentTranslationPendingActivationCodeFooterNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentPendingActivationCodeFooterId, Content = "<p>Met vriendelijke groet,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Dit is een automatisch gegenereerd bericht. U kunt hier niet op reageren.</p>" });
                    var messageContentTranslationPendingActivationCodeSubjectNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentPendingActivationCodeSubjectId, Content = "#{CampaignName}" });

                    //(activation code -> be_nl)
                    var messageContentTranslationPendingActivationCodeHeaderBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentPendingActivationCodeHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Beste Hr/Mevr. #{LastName},</p>" });
                    var messageContentTranslationPendingActivationCodeBodyBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentPendingActivationCodeBodyId, Content = "<p>Uw inschrijving met referentienummer #{RegistrationId} is goed ontvangen en hierbij bevestigd.</p><p>Wij controleren uw gegevens en binnen 4 weken hoort u van ons of uw inschrijving is goedgekeurd.</p>" });
                    var messageContentTranslationPendingActivationCodeFooterBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentPendingActivationCodeFooterId, Content = "<p>Met vriendelijke groet,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Dit is een automatisch gegenereerd bericht. U kunt hier niet op reageren.</p>" });
                    var messageContentTranslationPendingActivationCodeSubjectBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentPendingActivationCodeSubjectId, Content = "#{CampaignName}" });

                    //(activation code -> be_fr)
                    var messageContentTranslationPendingActivationCodeHeaderBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentPendingActivationCodeHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Cher M. / Mme. #{LastName},</p>" });
                    var messageContentTranslationPendingActivationCodeBodyBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentPendingActivationCodeBodyId, Content = "<p>Votre inscription avec le numéro de référence #{RegistrationId} a été reçue et confirmée.</p><p>Nous vérifierons vos coordonnées et dans les 4 semaines, nous vous informerons si votre inscription a été approuvée.</p>" });
                    var messageContentTranslationPendingActivationCodeFooterBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentPendingActivationCodeFooterId, Content = "<p>Cordialement,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Ceci est un message généré automatiquement. Vous ne pouvez pas répondre à cela.</p>" });
                    var messageContentTranslationPendingActivationCodeSubjectBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentPendingActivationCodeSubjectId, Content = "#{CampaignName}" });

                    //approval message
                    //(cash refund -> nl_nl)
                    var messageContentTranslationApprovedCashRefundHeaderNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentApprovedCashRefundHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Beste Hr/Mevr. #{LastName},</p>" });
                    var messageContentTranslationApprovedCashRefundBodyNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentApprovedCashRefundBodyId, Content = "<p>Uw inschrijving met referentienummer #{RegistrationId} is hierbij goedgekeurd. U ontvangt zo spoedig mogelijk uw cashback.</p>" });
                    var messageContentTranslationApprovedCashRefundFooterNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentApprovedCashRefundFooterId, Content = "<p>Met vriendelijke groet,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Dit is een automatisch gegenereerd bericht. U kunt hier niet op reageren.</p>" });
                    var messageContentTranslationApprovedCashRefundSubjectNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentApprovedCashRefundSubjectId, Content = "#{CampaignName}" });

                    //(cash refund -> be_nl)
                    var messageContentTranslationApprovedCashRefundHeaderBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentApprovedCashRefundHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Beste Hr/Mevr. #{LastName},</p>" });
                    var messageContentTranslationApprovedCashRefundBodyBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentApprovedCashRefundBodyId, Content = "<p>Uw inschrijving met referentienummer #{RegistrationId} is hierbij goedgekeurd. U ontvangt zo spoedig mogelijk uw cashback.</p>" });
                    var messageContentTranslationApprovedCashRefundFooterBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentApprovedCashRefundFooterId, Content = "<p>Met vriendelijke groet,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Dit is een automatisch gegenereerd bericht. U kunt hier niet op reageren.</p>" });
                    var messageContentTranslationApprovedCashRefundSubjectBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentApprovedCashRefundSubjectId, Content = "#{CampaignName}" });

                    //(cash refund -> be_fr)
                    var messageContentTranslationApprovedCashRefundHeaderBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentApprovedCashRefundHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Cher M. / Mme. #{LastName},</p>" });
                    var messageContentTranslationApprovedCashRefundBodyBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentApprovedCashRefundBodyId, Content = "<p>Votre inscription avec le numéro de référence #{RegistrationId} a été approuvée. Vous recevrez bientôt votre cashback.</p>" });
                    var messageContentTranslationApprovedCashRefundFooterBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentApprovedCashRefundFooterId, Content = "<p>Cordialement,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Ceci est un message généré automatiquement. Vous ne pouvez pas répondre à cela.</p>" });
                    var messageContentTranslationApprovedCashRefundSubjectBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentApprovedCashRefundSubjectId, Content = "#{CampaignName}" });

                    //(premium -> nl_nl)
                    var messageContentTranslationApprovedPremiumHeaderNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentApprovedPremiumHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Beste Hr/Mevr. #{LastName},</p>" });
                    var messageContentTranslationApprovedPremiumBodyNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentApprovedPremiumBodyId, Content = "<p>Uw inschrijving met referentienummer #{RegistrationId} is hierbij goedgekeurd. U ontvangt zo spoedig mogelijk uw geschenk.</p>" });
                    var messageContentTranslationApprovedPremiumFooterNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentApprovedPremiumFooterId, Content = "<p>Met vriendelijke groet,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Dit is een automatisch gegenereerd bericht. U kunt hier niet op reageren.</p>" });
                    var messageContentTranslationApprovedPremiumSubjectNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentApprovedPremiumSubjectId, Content = "#{CampaignName}" });

                    //(premium -> be_nl)
                    var messageContentTranslationApprovedPremiumHeaderBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentApprovedPremiumHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Beste Hr/Mevr. #{LastName},</p>" });
                    var messageContentTranslationApprovedPremiumBodyBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentApprovedPremiumBodyId, Content = "<p>Uw inschrijving met referentienummer #{RegistrationId} is hierbij goedgekeurd. U ontvangt zo spoedig mogelijk uw geschenk.</p>" });
                    var messageContentTranslationApprovedPremiumFooterBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentApprovedPremiumFooterId, Content = "<p>Met vriendelijke groet,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Dit is een automatisch gegenereerd bericht. U kunt hier niet op reageren.</p>" });
                    var messageContentTranslationApprovedPremiumSubjectBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentApprovedPremiumSubjectId, Content = "#{CampaignName}" });

                    //(premium -> be_fr)
                    var messageContentTranslationApprovedPremiumHeaderBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentApprovedPremiumHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Cher M. / Mme. #{LastName},</p>" });
                    var messageContentTranslationApprovedPremiumBodyBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentApprovedPremiumBodyId, Content = "<p>Votre inscription avec le numéro de référence #{RegistrationId} a été approuvée. Vous recevrez bientôt votre cadeau.</p>" });
                    var messageContentTranslationApprovedPremiumFooterBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentApprovedPremiumFooterId, Content = "<p>Cordialement,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Ceci est un message généré automatiquement. Vous ne pouvez pas répondre à cela.</p>" });
                    var messageContentTranslationApprovedPremiumSubjectBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentApprovedPremiumSubjectId, Content = "#{CampaignName}" });

                    //(activation code -> nl_nl)
                    var messageContentTranslationApprovedActivationCodeHeaderNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentApprovedActivationCodeHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Beste Hr/Mevr. #{LastName},</p>" });
                    var messageContentTranslationApprovedActivationCodeBodyNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentApprovedActivationCodeBodyId, Content = "<p>Uw inschrijving met referentienummer #{RegistrationId} is hierbij goedgekeurd. U ontvangt zo spoedig mogelijk uw activatie code.</p>" });
                    var messageContentTranslationApprovedActivationCodeFooterNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentApprovedActivationCodeFooterId, Content = "<p>Met vriendelijke groet,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Dit is een automatisch gegenereerd bericht. U kunt hier niet op reageren.</p>" });
                    var messageContentTranslationApprovedActivationCodeSubjectNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentApprovedActivationCodeSubjectId, Content = "#{CampaignName}" });

                    //(activation code -> be_nl)
                    var messageContentTranslationApprovedActivationCodeHeaderBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentApprovedActivationCodeHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Beste Hr/Mevr. #{LastName},</p>" });
                    var messageContentTranslationApprovedActivationCodeBodyBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentApprovedActivationCodeBodyId, Content = "<p>Uw inschrijving met referentienummer #{RegistrationId} is hierbij goedgekeurd. U ontvangt zo spoedig mogelijk uw activatie code.</p>" });
                    var messageContentTranslationApprovedActivationCodeFooterBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentApprovedActivationCodeFooterId, Content = "<p>Met vriendelijke groet,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Dit is een automatisch gegenereerd bericht. U kunt hier niet op reageren.</p>" });
                    var messageContentTranslationApprovedActivationCodeSubjectBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentApprovedActivationCodeSubjectId, Content = "#{CampaignName}" });

                    //(activation code -> be_fr)
                    var messageContentTranslationApprovedActivationCodeHeaderBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentApprovedActivationCodeHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Cher M. / Mme. #{LastName},</p>" });
                    var messageContentTranslationApprovedActivationCodeBodyBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentApprovedActivationCodeBodyId, Content = "<p>Votre inscription avec le numéro de référence #{RegistrationId} a été approuvée. Vous recevrez bientôt votre code d'activation.</p>" });
                    var messageContentTranslationApprovedActivationCodeFooterBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentApprovedActivationCodeFooterId, Content = "<p>Cordialement,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Ceci est un message généré automatiquement. Vous ne pouvez pas répondre à cela.</p>" });
                    var messageContentTranslationApprovedActivationCodeSubjectBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentApprovedActivationCodeSubjectId, Content = "#{CampaignName}" });

                    //rejection message (registration is rejected)
                    //(cash refund -> nl_nl)
                    var messageContentTranslationRejectedCashRefundHeaderNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentRejectedCashRefundHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Beste Hr/Mevr. #{LastName},</p>" });
                    var messageContentTranslationRejectedCashRefundBodyNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentRejectedCashRefundBodyId, Content = "<p>Uw inschrijving met referentienummer #{RegistrationId} is helaas afgekeurd, om de volgende reden:</p><p>#{RejectionReason}</p>" });
                    var messageContentTranslationRejectedCashRefundFooterNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentRejectedCashRefundFooterId, Content = "<p>Met vriendelijke groet,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Dit is een automatisch gegenereerd bericht. U kunt hier niet op reageren.</p>" });
                    var messageContentTranslationRejectedCashRefundSubjectNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentRejectedCashRefundSubjectId, Content = "#{CampaignName}" });

                    //(cash refund -> be_nl)
                    var messageContentTranslationRejectedCashRefundHeaderBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentRejectedCashRefundHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Beste Hr/Mevr. #{LastName},</p>" });
                    var messageContentTranslationRejectedCashRefundBodyBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentRejectedCashRefundBodyId, Content = "<p>Uw inschrijving met referentienummer #{RegistrationId} is helaas afgekeurd, om de volgende reden:</p><p>#{RejectionReason}</p>" });
                    var messageContentTranslationRejectedCashRefundFooterBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentRejectedCashRefundFooterId, Content = "<p>Met vriendelijke groet,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Dit is een automatisch gegenereerd bericht. U kunt hier niet op reageren.</p>" });
                    var messageContentTranslationRejectedCashRefundSubjectBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentRejectedCashRefundSubjectId, Content = "#{CampaignName}" });

                    //(cash refund -> be_fr)
                    var messageContentTranslationRejectedCashRefundHeaderBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentRejectedCashRefundHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Cher M. / Mme. #{LastName},</p>" });
                    var messageContentTranslationRejectedCashRefundBodyBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentRejectedCashRefundBodyId, Content = "<p>Votre inscription avec le numéro de référence #{RegistrationId} a malheureusement été rejetée, pour la raison suivante:</p><p>#{RejectionReason}</p>" });
                    var messageContentTranslationRejectedCashRefundFooterBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentRejectedCashRefundFooterId, Content = "<p>Cordialement,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Ceci est un message généré automatiquement. Vous ne pouvez pas répondre à cela.</p>" });
                    var messageContentTranslationRejectedCashRefundSubjectBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentRejectedCashRefundSubjectId, Content = "#{CampaignName}" });

                    //(premium -> nl_nl)
                    var messageContentTranslationRejectedPremiumHeaderNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentRejectedPremiumHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Beste Hr/Mevr. #{LastName},</p>" });
                    var messageContentTranslationRejectedPremiumBodyNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentRejectedPremiumBodyId, Content = "<p>Uw inschrijving met referentienummer #{RegistrationId} is helaas afgekeurd, om de volgende reden:</p><p>#{RejectionReason}</p>" });
                    var messageContentTranslationRejectedPremiumFooterNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentRejectedPremiumFooterId, Content = "<p>Met vriendelijke groet,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Dit is een automatisch gegenereerd bericht. U kunt hier niet op reageren.</p>" });
                    var messageContentTranslationRejectedPremiumSubjectNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentRejectedPremiumSubjectId, Content = "#{CampaignName}" });

                    //(premium -> be_nl)
                    var messageContentTranslationRejectedPremiumHeaderBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentRejectedPremiumHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Beste Hr/Mevr. #{LastName},</p>" });
                    var messageContentTranslationRejectedPremiumBodyBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentRejectedPremiumBodyId, Content = "<p>Uw inschrijving met referentienummer #{RegistrationId} is helaas afgekeurd, om de volgende reden:</p><p>#{RejectionReason}</p>" });
                    var messageContentTranslationRejectedPremiumFooterBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentRejectedPremiumFooterId, Content = "<p>Met vriendelijke groet,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Dit is een automatisch gegenereerd bericht. U kunt hier niet op reageren.</p>" });
                    var messageContentTranslationRejectedPremiumSubjectBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentRejectedPremiumSubjectId, Content = "#{CampaignName}" });

                    //(premium -> be_fr)
                    var messageContentTranslationRejectedPremiumHeaderBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentRejectedPremiumHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Cher M. / Mme. #{LastName},</p>" });
                    var messageContentTranslationRejectedPremiumBodyBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentRejectedPremiumBodyId, Content = "<p>Votre inscription avec le numéro de référence #{RegistrationId} a malheureusement été rejetée, pour la raison suivante:</p><p>#{RejectionReason}</p>" });
                    var messageContentTranslationRejectedPremiumFooterBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentRejectedPremiumFooterId, Content = "<p>Cordialement,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Ceci est un message généré automatiquement. Vous ne pouvez pas répondre à cela.</p>" });
                    var messageContentTranslationRejectedPremiumSubjectBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentRejectedPremiumSubjectId, Content = "#{CampaignName}" });

                    //(activation code -> nl_nl)
                    var messageContentTranslationRejectedActivationCodeHeaderNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentRejectedActivationCodeHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Beste Hr/Mevr. #{LastName},</p>" });
                    var messageContentTranslationRejectedActivationCodeBodyNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentRejectedActivationCodeBodyId, Content = "<p>Uw inschrijving met referentienummer #{RegistrationId} is helaas afgekeurd, om de volgende reden:</p><p>#{RejectionReason}</p>" });
                    var messageContentTranslationRejectedActivationCodeFooterNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentRejectedActivationCodeFooterId, Content = "<p>Met vriendelijke groet,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Dit is een automatisch gegenereerd bericht. U kunt hier niet op reageren.</p>" });
                    var messageContentTranslationRejectedActivationCodeSubjectNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentRejectedActivationCodeSubjectId, Content = "#{CampaignName}" });

                    //(activation code -> be_nl)
                    var messageContentTranslationRejectedActivationCodeHeaderBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentRejectedActivationCodeHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Beste Hr/Mevr. #{LastName},</p>" });
                    var messageContentTranslationRejectedActivationCodeBodyBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentRejectedActivationCodeBodyId, Content = "<p>Uw inschrijving met referentienummer #{RegistrationId} is helaas afgekeurd, om de volgende reden:</p><p>#{RejectionReason}</p>" });
                    var messageContentTranslationRejectedActivationCodeFooterBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentRejectedActivationCodeFooterId, Content = "<p>Met vriendelijke groet,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Dit is een automatisch gegenereerd bericht. U kunt hier niet op reageren.</p>" });
                    var messageContentTranslationRejectedActivationCodeSubjectBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentRejectedActivationCodeSubjectId, Content = "#{CampaignName}" });

                    //(activation code -> be_fr)
                    var messageContentTranslationRejectedActivationCodeHeaderBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentRejectedActivationCodeHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Cher M. / Mme. #{LastName},</p>" });
                    var messageContentTranslationRejectedActivationCodeBodyBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentRejectedActivationCodeBodyId, Content = "<p>Votre inscription avec le numéro de référence #{RegistrationId} a malheureusement été rejetée, pour la raison suivante:</p><p>#{RejectionReason}</p>" });
                    var messageContentTranslationRejectedActivationCodeFooterBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentRejectedActivationCodeFooterId, Content = "<p>Cordialement,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Ceci est un message généré automatiquement. Vous ne pouvez pas répondre à cela.</p>" });
                    var messageContentTranslationRejectedActivationCodeSubjectBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentRejectedActivationCodeSubjectId, Content = "#{CampaignName}" });

                    //incomplete message (registration is incomplete)
                    //(cash refund -> nl_nl)
                    var messageContentTranslationIncompleteCashRefundHeaderNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentIncompleteCashRefundHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Beste Hr/Mevr. #{LastName},</p>" });
                    var messageContentTranslationIncompleteCashRefundBodyNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentIncompleteCashRefundBodyId, Content = "<p>Uw inschrijving met referentienummer #{RegistrationId} is gecontroleerd en niet goedgekeurd, om de volgende reden:</p><p>#{RejectionReason}</p><p>Gebruik onderstaande link en wachtwoord om uw inschrijving te wijzigen.</p><p>Wachtwoord: #{Password}</p><p><a href=\"https://sbj.rms2.eu/nl_nl/registrations/#{RegistrationId}/edit\" rel=\"noopener noreferrer\" target=\"_blank\">https://sbj.rms2.eu/nl_nl/registrations/#{RegistrationId}/edit</a></p>" });
                    var messageContentTranslationIncompleteCashRefundFooterNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentIncompleteCashRefundFooterId, Content = "<p>Met vriendelijke groet,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Dit is een automatisch gegenereerd bericht. U kunt hier niet op reageren.</p>" });
                    var messageContentTranslationIncompleteCashRefundSubjectNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentIncompleteCashRefundSubjectId, Content = "#{CampaignName}" });

                    //(cash refund -> be_nl)
                    var messageContentTranslationIncompleteCashRefundHeaderBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentIncompleteCashRefundHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Beste Hr/Mevr. #{LastName},</p>" });
                    var messageContentTranslationIncompleteCashRefundBodyBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentIncompleteCashRefundBodyId, Content = "<p>Uw inschrijving met referentienummer #{RegistrationId} is gecontroleerd en niet goedgekeurd, om de volgende reden:</p><p>#{RejectionReason}</p><p>Gebruik onderstaande link en wachtwoord om uw inschrijving te wijzigen.</p><p>Wachtwoord: #{Password}</p><p><a href=\"https://sbj.rms2.eu/be_nl/registrations/#{RegistrationId}/edit\" rel=\"noopener noreferrer\" target=\"_blank\">https://sbj.rms2.eu/be_nl/registrations/#{RegistrationId}/edit</a></p>" });
                    var messageContentTranslationIncompleteCashRefundFooterBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentIncompleteCashRefundFooterId, Content = "<p>Met vriendelijke groet,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Dit is een automatisch gegenereerd bericht. U kunt hier niet op reageren.</p>" });
                    var messageContentTranslationIncompleteCashRefundSubjectBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentIncompleteCashRefundSubjectId, Content = "#{CampaignName}" });

                    //(cash refund -> be_fr)
                    var messageContentTranslationIncompleteCashRefundHeaderBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentIncompleteCashRefundHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Cher M. / Mme. #{LastName},</p>" });
                    var messageContentTranslationIncompleteCashRefundBodyBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentIncompleteCashRefundBodyId, Content = "<p>Votre inscription avec le numéro de référence #{RegistrationId} a été vérifiée et non approuvée, pour la raison suivante:</p><p>#{RejectionReason}</p><p>Utilisez le lien ci-dessous et le mot de passe pour modifier votre inscription.</p><p>Mot de passe: #{Password}</p><p><a href=\"https://sbj.rms2.eu/be_fr/registrations/#{RegistrationId}/edit\" rel=\"noopener noreferrer\" target=\"_blank\">https://sbj.rms2.eu/be_fr/registrations/#{RegistrationId}/edit</a></p>" });
                    var messageContentTranslationIncompleteCashRefundFooterBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentIncompleteCashRefundFooterId, Content = "<p>Cordialement,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Ceci est un message généré automatiquement. Vous ne pouvez pas répondre à cela.</p>" });
                    var messageContentTranslationIncompleteCashRefundSubjectBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentIncompleteCashRefundSubjectId, Content = "#{CampaignName}" });

                    //(premium -> nl_nl)
                    var messageContentTranslationIncompletePremiumHeaderNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentIncompletePremiumHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Beste Hr/Mevr. #{LastName},</p>" });
                    var messageContentTranslationIncompletePremiumBodyNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentIncompletePremiumBodyId, Content = "<p>Uw inschrijving met referentienummer #{RegistrationId} is gecontroleerd en niet goedgekeurd, om de volgende reden:</p><p>#{RejectionReason}</p><p>Gebruik onderstaande link en wachtwoord om uw inschrijving te wijzigen.</p><p>Wachtwoord: #{Password}</p><p><a href=\"https://sbj.rms2.eu/nl_nl/registrations/#{RegistrationId}/edit\" rel=\"noopener noreferrer\" target=\"_blank\">https://sbj.rms2.eu/nl_nl/registrations/#{RegistrationId}/edit</a></p>" });
                    var messageContentTranslationIncompletePremiumFooterNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentIncompletePremiumFooterId, Content = "<p>Met vriendelijke groet,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Dit is een automatisch gegenereerd bericht. U kunt hier niet op reageren.</p>" });
                    var messageContentTranslationIncompletePremiumSubjectNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentIncompletePremiumSubjectId, Content = "#{CampaignName}" });

                    //(premium -> be_nl)
                    var messageContentTranslationIncompletePremiumHeaderBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentIncompletePremiumHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Beste Hr/Mevr. #{LastName},</p>" });
                    var messageContentTranslationIncompletePremiumBodyBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentIncompletePremiumBodyId, Content = "<p>Uw inschrijving met referentienummer #{RegistrationId} is gecontroleerd en niet goedgekeurd, om de volgende reden:</p><p>#{RejectionReason}</p><p>Gebruik onderstaande link en wachtwoord om uw inschrijving te wijzigen.</p><p>Wachtwoord: #{Password}</p><p><a href=\"https://sbj.rms2.eu/be_nl/registrations/#{RegistrationId}/edit\" rel=\"noopener noreferrer\" target=\"_blank\">https://sbj.rms2.eu/be_nl/registrations/#{RegistrationId}/edit</a></p>" });
                    var messageContentTranslationIncompletePremiumFooterBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentIncompletePremiumFooterId, Content = "<p>Met vriendelijke groet,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Dit is een automatisch gegenereerd bericht. U kunt hier niet op reageren.</p>" });
                    var messageContentTranslationIncompletePremiumSubjectBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentIncompletePremiumSubjectId, Content = "#{CampaignName}" });

                    //(premium -> be_fr)
                    var messageContentTranslationIncompletePremiumHeaderBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentIncompletePremiumHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Cher M. / Mme. #{LastName},</p>" });
                    var messageContentTranslationIncompletePremiumBodyBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentIncompletePremiumBodyId, Content = "<p>Votre inscription avec le numéro de référence #{RegistrationId} a été vérifiée et non approuvée, pour la raison suivante:</p><p>#{RejectionReason}</p><p>Utilisez le lien ci-dessous et le mot de passe pour modifier votre inscription.</p><p>Mot de passe: #{Password}</p><p><a href=\"https://sbj.rms2.eu/be_fr/registrations/#{RegistrationId}/edit\" rel=\"noopener noreferrer\" target=\"_blank\">https://sbj.rms2.eu/be_fr/registrations/#{RegistrationId}/edit</a></p>" });
                    var messageContentTranslationIncompletePremiumFooterBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentIncompletePremiumFooterId, Content = "<p>Cordialement,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Ceci est un message généré automatiquement. Vous ne pouvez pas répondre à cela.</p>" });
                    var messageContentTranslationIncompletePremiumSubjectBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentIncompletePremiumSubjectId, Content = "#{CampaignName}" });

                    //(activation code -> nl_nl)
                    var messageContentTranslationIncompleteActivationCodeHeaderNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentIncompleteActivationCodeHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Beste Hr/Mevr. #{LastName},</p>" });
                    var messageContentTranslationIncompleteActivationCodeBodyNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentIncompleteActivationCodeBodyId, Content = "<p>Uw inschrijving met referentienummer #{RegistrationId} is gecontroleerd en niet goedgekeurd, om de volgende reden:</p><p>#{RejectionReason}</p><p>Gebruik onderstaande link en wachtwoord om uw inschrijving te wijzigen.</p><p>Wachtwoord: #{Password}</p><p><a href=\"https://sbj.rms2.eu/nl_nl/registrations/#{RegistrationId}/edit\" rel=\"noopener noreferrer\" target=\"_blank\">https://sbj.rms2.eu/nl_nl/registrations/#{RegistrationId}/edit</a></p>" });
                    var messageContentTranslationIncompleteActivationCodeFooterNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentIncompleteActivationCodeFooterId, Content = "<p>Met vriendelijke groet,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Dit is een automatisch gegenereerd bericht. U kunt hier niet op reageren.</p>" });
                    var messageContentTranslationIncompleteActivationCodeSubjectNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentIncompleteActivationCodeSubjectId, Content = "#{CampaignName}" });

                    //(activation code -> be_nl)
                    var messageContentTranslationIncompleteActivationCodeHeaderBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentIncompleteActivationCodeHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Beste Hr/Mevr. #{LastName},</p>" });
                    var messageContentTranslationIncompleteActivationCodeBodyBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentIncompleteActivationCodeBodyId, Content = "<p>Uw inschrijving met referentienummer #{RegistrationId} is gecontroleerd en niet goedgekeurd, om de volgende reden:</p><p>#{RejectionReason}</p><p>Gebruik onderstaande link en wachtwoord om uw inschrijving te wijzigen.</p><p>Wachtwoord: #{Password}</p><p><a href=\"https://sbj.rms2.eu/be_nl/registrations/#{RegistrationId}/edit\" rel=\"noopener noreferrer\" target=\"_blank\">https://sbj.rms2.eu/be_nl/registrations/#{RegistrationId}/edit</a></p>" });
                    var messageContentTranslationIncompleteActivationCodeFooterBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentIncompleteActivationCodeFooterId, Content = "<p>Met vriendelijke groet,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Dit is een automatisch gegenereerd bericht. U kunt hier niet op reageren.</p>" });
                    var messageContentTranslationIncompleteActivationCodeSubjectBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentIncompleteActivationCodeSubjectId, Content = "#{CampaignName}" });

                    //(activation code -> be_fr)
                    var messageContentTranslationIncompleteActivationCodeHeaderBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentIncompleteActivationCodeHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Cher M. / Mme. #{LastName},</p>" });
                    var messageContentTranslationIncompleteActivationCodeBodyBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentIncompleteActivationCodeBodyId, Content = "<p>Votre inscription avec le numéro de référence #{RegistrationId} a été vérifiée et non approuvée, pour la raison suivante:</p><p>#{RejectionReason}</p><p>Utilisez le lien ci-dessous et le mot de passe pour modifier votre inscription.</p><p>Mot de passe: #{Password}</p><p><a href=\"https://sbj.rms2.eu/be_fr/registrations/#{RegistrationId}/edit\" rel=\"noopener noreferrer\" target=\"_blank\">https://sbj.rms2.eu/be_fr/registrations/#{RegistrationId}/edit</a></p>" });
                    var messageContentTranslationIncompleteActivationCodeFooterBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentIncompleteActivationCodeFooterId, Content = "<p>Cordialement,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Ceci est un message généré automatiquement. Vous ne pouvez pas répondre à cela.</p>" });
                    var messageContentTranslationIncompleteActivationCodeSubjectBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentIncompleteActivationCodeSubjectId, Content = "#{CampaignName}" });

                    //activation code message (registration is in progress) [this message is only applicable for ActivationCode campaigns]
                    //(activation code -> nl_nl)
                    var messageContentTranslationInProgressActivationCodeHeaderNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentInProgressActivationCodeHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Beste Hr/Mevr. #{LastName},</p>" });
                    var messageContentTranslationInProgressActivationCodeBodyNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentInProgressActivationCodeBodyId, Content = "<p>Naar aanleiding van uw goedgekeurde inschrijving met referentienummer #{RegistrationId} ontvangt u hierbij uw activatie code.</p><p>Uw activatie code: <strong>#{ActivationCode}</strong></p>" });
                    var messageContentTranslationInProgressActivationCodeFooterNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentInProgressActivationCodeFooterId, Content = "<p>Met vriendelijke groet,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Dit is een automatisch gegenereerd bericht. U kunt hier niet op reageren.</p>" });
                    var messageContentTranslationInProgressActivationCodeSubjectNlNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeNlNlId, MessageComponentContentId = messageComponentContentInProgressActivationCodeSubjectId, Content = "#{CampaignName}" });

                    //(activation code -> be_nl)
                    var messageContentTranslationInProgressActivationCodeHeaderBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentInProgressActivationCodeHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Beste Hr/Mevr. #{LastName},</p>" });
                    var messageContentTranslationInProgressActivationCodeBodyBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentInProgressActivationCodeBodyId, Content = "<p>Naar aanleiding van uw goedgekeurde inschrijving met referentienummer #{RegistrationId} ontvangt u hierbij uw activatie code.</p><p>Uw activatie code: <strong>#{ActivationCode}</strong></p>" });
                    var messageContentTranslationInProgressActivationCodeFooterBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentInProgressActivationCodeFooterId, Content = "<p>Met vriendelijke groet,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Dit is een automatisch gegenereerd bericht. U kunt hier niet op reageren.</p>" });
                    var messageContentTranslationInProgressActivationCodeSubjectBeNlId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeNlId, MessageComponentContentId = messageComponentContentInProgressActivationCodeSubjectId, Content = "#{CampaignName}" });

                    //(activation code -> be_fr)
                    var messageContentTranslationInProgressActivationCodeHeaderBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentInProgressActivationCodeHeaderId, Content = "<p><img src=\"https://rms2public.blob.core.windows.net/sbj/sbj.png\"></p><p>Cher M. / Mme. #{LastName},</p>" });
                    var messageContentTranslationInProgressActivationCodeBodyBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentInProgressActivationCodeBodyId, Content = "<p>Suite à votre inscription approuvée avec le numéro de référence #{RegistrationId} vous recevrez votre code d'activation.</p><p>Votre code d'activation: <strong>#{ActivationCode}</strong></p>" });
                    var messageContentTranslationInProgressActivationCodeFooterBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentInProgressActivationCodeFooterId, Content = "<p>Cordialement,</p><p>Service Bureau Jansen</p><p>-------------------------------------------------------------------------------------------------------------------------------------</p><p>Ceci est un message généré automatiquement. Vous ne pouvez pas répondre à cela.</p>" });
                    var messageContentTranslationInProgressActivationCodeSubjectBeFrId = await _messageContentTranslationRepository.InsertAndGetIdAsync(new MessageContentTranslation { TenantId = tenantId, CreationTime = DateTime.Now, CreatorUserId = 1, IsDeleted = false, LocaleId = localeBeFrId, MessageComponentContentId = messageComponentContentInProgressActivationCodeSubjectId, Content = "#{CampaignName}" });

                    #endregion

                    CurrentUnitOfWork.SaveChanges();
                    await uow.CompleteAsync();
                    uow.Dispose();
                }
            }
            catch (Exception ex)
            {
                return false;
            }

            return true;
        }
    }
}
